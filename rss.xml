<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2025-10-27T05:37:25+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Programmers, Don’t Use Windows!</title><link href="https://www.yegor256.com/2025/10/05/windows-vs-macos.html" rel="alternate" type="text/html" title="Programmers, Don’t Use Windows!" /><published>2025-10-05T00:00:00+00:00</published><updated>2025-10-05T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/10/05/windows-vs-macos</id><content type="html" xml:base="https://www.yegor256.com/2025/10/05/windows-vs-macos.html"><![CDATA[<p>In 2020, in the <a href="/books/junior-objects">Junior Objects</a> book I wrote this:
  “<em>Windows is not suitable for programmers.
  If you meet anyone who will tell you otherwise, you must know that you deal with a bad programmer, or a poor one, which are the same things.
  Your computer has to be MacBook.</em>”
Now, five years later, I still hold the same opinion.
This blog post is supposed to be less opinionated and, because of this, more convincing.
The point is still the same: you either use Windows or you are a professional programmer.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Das Experiment (2001) by Oliver Hirschbiegel" src="/images/2025/10/das-experiment.jpg" longdesc="#f88f9b9a" /><figcaption id="f88f9b9a">Das Experiment (2001) by Oliver Hirschbiegel</figcaption></figure>

<p>First things first.
This is what ChatGPT <a href="https://chatgpt.com/share/68e2770a-79d8-8007-96d1-3722d4d3cfcd">thinks</a> about macOS vs. Windows (I toned it down a bit and sorted by importance, keeping what matters most at the top):</p>

<ul>
  <li>It’s <a href="https://en.wikipedia.org/wiki/POSIX">POSIX</a>-compliant</li>
  <li>Tools like <code class="language-plaintext highlighter-rouge">grep</code>, <code class="language-plaintext highlighter-rouge">awk</code>, <code class="language-plaintext highlighter-rouge">sed</code>, <code class="language-plaintext highlighter-rouge">ssh</code>, and <code class="language-plaintext highlighter-rouge">make</code> work natively</li>
  <li>Proper compiler toolchain: Clang, LLVM, make, <a href="https://git-scm.com/">git</a></li>
  <li>Install everything with <a href="https://brew.sh/">HomeBrew</a>, one command away</li>
  <li>Node, Python, Ruby, Go, Java—just work without PATH hell</li>
  <li>The <a href="https://iterm2.com/">iTerm2</a> doesn’t look like it was built in 1998</li>
  <li><a href="https://www.docker.com/">Docker</a> runs faster and cleaner than on Windows</li>
  <li>SSH keys integrate smoothly with the system keychain</li>
  <li><a href="https://git-scm.com/">Git</a> behaves predictably; no <a href="https://stackoverflow.com/questions/1552749/difference-between-cr-lf-lf-and-cr-line-break-types">CRLF vs LF nightmares</a></li>
</ul>

<p>I can hear you saying:
What do I need it to be POSIX-compliant, and what is POSIX?
Why do I need <code class="language-plaintext highlighter-rouge">grep</code>, <code class="language-plaintext highlighter-rouge">sed</code>, and <code class="language-plaintext highlighter-rouge">awk</code>?
Am I a 60 years old Unix admin?
Why would I ever need <code class="language-plaintext highlighter-rouge">git</code> and <code class="language-plaintext highlighter-rouge">make</code> in the command line?
I don’t use command line at all.
I stay in the <a href="https://code.visualstudio.com/">VS Code</a> that works like a charm and helps me make a living.</p>

<p>I hear you. I do.</p>

<p>Now, hear me out.
You are not a programmer.
You look like one.
You walk like one.
You click the same buttons programmers click.
You even make the same salary they make.
But you are not one of them.
Yet.
Now, read on.</p>

<h2 id="what-is-unix">What Is Unix?</h2>

<p>Programmers are the masters of computers.
They tell machines what to do.
To simplify the task of managing a complex hardware, programmers invented a few layers of abstractions.
The first layer is an operating system.
Instead of dealing with the hard drive and the pixels on the screen directly, programmers invented files and stdout.</p>

<p>They did it in the <a href="https://en.wikipedia.org/wiki/Bell_Labs">Bell Labs</a>, during the late 1960s and early 1970s.
Earlier operating systems, like <a href="https://en.wikipedia.org/wiki/Compatible_Time-Sharing_System">CTSS</a> and <a href="https://en.wikipedia.org/wiki/OS/360_and_successors">OS/360</a>, gave them a good start.
Unix was the first OS to say that <em>everything is a file</em>, including devices, directories, sockets, and processes.
They also invented <em>pipelines</em> and the philosophy: “Write programs that do one thing well, and work together.”
They also invented <em>processes</em> and their forking mechanism.</p>

<p>Their names were <a href="https://en.wikipedia.org/wiki/Ken_Thompson">Ken Thompson</a> and <a href="https://en.wikipedia.org/wiki/Dennis_Ritchie">Dennis Ritchie</a>.</p>

<h2 id="what-is-windows">What Is Windows?</h2>

<p>Five years later, another operating system was created, with different abstractions.
Not everything was a file anymore, processes were not parallel, and there were no pipelines.
The name of the system was <a href="https://en.wikipedia.org/wiki/CP/M">CP/M</a> and the name of the inventor was <a href="https://en.wikipedia.org/wiki/Gary_Kildall">Gary Kildall</a>.
Then, five years later, 24-year-old <a href="https://en.wikipedia.org/wiki/Tim_Paterson">Tim Paterson</a> has made a copy of CP/M and called it <a href="https://en.wikipedia.org/wiki/86-DOS">86-DOS</a>.
<a href="https://www.microsoft.com/">Microsoft</a> purchased a non-exclusive license, rebranded it <a href="https://en.wikipedia.org/wiki/MS-DOS">MS-DOS</a>, and sold it to IBM.
That’s how Windows was born.</p>

<p>Why were there no proper files, no processes, and no pipelines?
Because they weren’t trying to build a “real” operating system.
CP/M and MS-DOS were designed for tiny, single-user, single-task microcomputers, not multi-user minicomputers or mainframes.
Unix came out of Bell Labs—researchers, not hobbyists.
CP/M and MS-DOS were made for personal computers: offices and home users.
In other words, <em>MS-DOS never meant to be a proper OS</em>.
It was something that can boot up a small machine and run a single program.</p>

<p>Then, in 1985, <a href="https://en.wikipedia.org/wiki/Windows_1.0">Windows 1.0</a> was built.
It was a fancy <a href="https://en.wikipedia.org/wiki/Graphical_user_interface">GUI</a> on top of MS-DOS, not a new OS.
Later, in 1995, Microsoft introduced 32-bit APIs (<a href="https://en.wikipedia.org/wiki/Windows_API">Win32</a>) and preemptive multitasking.
However, the DOS subsystem was still lurking underneath.
Windows 95 looked modern but was still a half-DOS zombie.</p>

<p>At the same time, in 1993, the team of <a href="https://en.wikipedia.org/wiki/Dave_Cutler">Dave Cutler</a> has built <a href="https://en.wikipedia.org/wiki/Windows_NT">Windows NT</a> that was not based on DOS at all.
Latest Windows versions are descendants of NT, not MS-DOS.
Under the hood it’s conceptually closer to Unix than to CP/M.
There are features like protected memory, kernel/user separation, and file handles.
However, still it’s not Unix.</p>

<h2 id="what-is-macos">What Is macOS?</h2>

<p>In 1984, <a href="https://www.apple.com/">Apple</a> shipped their first <a href="https://en.wikipedia.org/wiki/Macintosh_128K">Macintosh</a> with the “System 1” operating system.
It was no better than MS-DOS: no multitasking, no memory protection, and primitive file system.
No surprise, it didn’t fly.</p>

<p>In 1997, Apple bought <a href="https://en.wikipedia.org/wiki/NeXT">NeXT</a> and adopted <a href="https://en.wikipedia.org/wiki/NeXTSTEP">NeXTSTEP</a> operating system.
They made it the foundation for the new <a href="https://en.wikipedia.org/wiki/MacOS">Mac OS</a>—codenamed <a href="https://en.wikipedia.org/wiki/Rhapsody_(operating_system)">Rhapsody</a>, later “Mac OS X”.</p>

<p>In 2001 they shipped Mac OS X 10.0 (“<a href="https://en.wikipedia.org/wiki/Mac_OS_X_10.0">Cheetah</a>”).
Five years later I threw away my ThinkPad with Windows and bought my first MacBook with <a href="https://en.wikipedia.org/wiki/Mac_OS_X_Leopard">Mac OS X Leopard</a>.</p>

<p>Modern macOS (Catalina, Ventura, Sequoia, etc.) is still built on that NeXT foundation.
It is POSIX-compliant and, of course, it has processes and pipelines.
In other words, it is Unix with a pretty GUI.</p>

<h2 id="abstractions">Abstractions</h2>

<p>Both Windows and macOS, in their current versions, are solid operating systems.
The difference is in the abstractions inside them: files, sockets, processes, memory blocks, users, permissions, and so on.
In Unix (macOS), everything is a <em>file</em>, while in Windows, everything is an <em>object</em>.
Files in Unix are a uniform abstraction, that’s why they can be chained via pipes.
In Windows objects are not unified in practice, they have different interfaces.</p>

<p>This is why <a href="https://en.wikipedia.org/wiki/Unix_shell">Unix shells</a> and small composable tools became so powerful.
The uniformity of “everything is a file” made composition natural.
You can build complex workflows from simple programs.</p>

<p>Windows, on the other hand, evolved around GUI apps and message loops, not shell pipelines.</p>

<h2 id="pipelines">Pipelines</h2>

<p><a href="https://en.wikipedia.org/wiki/Unix">Unix</a> was built around pipelines.
In Unix, everything is a small tool reading stdin, writing stdout.
At the same time, everything is a file, including sockets, devices, and processes.
Programmers, in Unix, see every process as a <em>composition</em> of smaller processes, glued together via pipelines.
This mindset, since 1970s, has proven to be effective, amongst a few generations of software engineering elite.</p>

<p>Say, you want to know which parts of your codebase change the most—maybe for refactoring, testing focus, or bug-hotspot analysis.
This is how you do it Unix-style:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git log <span class="nt">--pretty</span><span class="o">=</span>format: <span class="nt">--name-only</span> | <span class="se">\</span>
  <span class="nb">grep</span> <span class="s1">'\.java$'</span> | <span class="se">\</span>
  <span class="nb">sort</span> | <span class="se">\</span>
  <span class="nb">uniq</span> <span class="nt">-c</span> | <span class="se">\</span>
  <span class="nb">sort</span> <span class="nt">-nr</span> | <span class="se">\</span>
  <span class="nb">head</span> <span class="nt">-20</span>
</code></pre></div></div>

<p>Does this syntax make sense to you?
If it does, I bet you use <a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux">WSL</a>.
Most serious Windows developers end up doing exactly that.</p>

<p>The command line is the bare metal interface to Unix.
The heart of the command line is pipelines.
Thanks to pipelines, command-line tools are inherently composable.
You can chain them and automate tasks in seconds that would take hours by hand.
No <a href="https://en.wikipedia.org/wiki/Integrated_development_environment">IDE</a> plugin can replace this power.</p>

<h2 id="what-are-you">What Are You?</h2>

<p>Now, you know what the difference is between Windows and macOS.
In both of them you can code, browse Internet, and watch movies.
However, in macOS you interact with the computer through Unix abstractions in a <a href="https://en.wikipedia.org/wiki/Unix_shell">shell</a>.
You don’t just use macOS—you inherit <em>fifty years of disciplined abstraction</em>.</p>

<p>In Windows you interact with the computer through draggable GUI elements.
A GUI makes you a consumer; a CLI makes you a creator.
A GUI hides the logic behind gestures and icons; a CLI exposes it as text you can reason about, automate, and combine.
You can’t pipe a button click into another program, you can’t grep a progress bar, and you can’t version-control a mouse movement.
Every click you make dies the moment you make it; every command you write can live forever.</p>

<p>Oh, wait.
In macOS you can’t really play games.
Bummer…
Maybe you shouldn’t, since you are a programmer?</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><summary type="html"><![CDATA[Windows turns programmers into mouse operators. macOS, built on Unix, keeps the command line alive—where everything is a file, tools connect through pipelines, and real programmers stay in control.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/10/das-experiment.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/10/das-experiment.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Red vs. Black</title><link href="https://www.yegor256.com/2025/09/14/red-and-black.html" rel="alternate" type="text/html" title="Red vs. Black" /><published>2025-09-14T00:00:00+00:00</published><updated>2025-09-14T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/09/14/red-and-black</id><content type="html" xml:base="https://www.yegor256.com/2025/09/14/red-and-black.html"><![CDATA[<p>In Soviet Russia, prisoner camps were divided into two categories: red and black.
In a red camp, the power belonged to the prisoners who cooperated with the administration and helped it maintain discipline.
In a black one, the power was in the hands of criminals who resented the rules, in permanent confrontation with the administration.
It seems that in software companies we may also categorize employees into red and black.
A <strong>red employee</strong> enjoys obeying the rules and climbs up the career ladder by <a href="/2015/01/26/happy-boss-false-objective.html">making the boss happy</a>.
To the contrary, a <strong>black employee</strong>, while understanding the inevitability, despises the necessity to obey.
Their career growth is driven by <a href="/2015/02/23/haircut.html">making the customer happy</a>.
Which one are you?</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Холодное лето пятьдесят третьего (1987) by Александр Прошкин" src="/images/2025/09/cold-summer-1953.jpg" longdesc="#ded7ba65" /><figcaption id="ded7ba65">Холодное лето пятьдесят третьего (1987) by Александр Прошкин</figcaption></figure>

<p>An organization cannot exist without policies and regulations.
Especially if it’s a large organization where the percentage of underperformers is highest.
The clock-watchers must be disciplined so that they produce at least something.
Let’s assume you are not one of them.</p>

<p>However, even if you are not a nine-to-five clock-watcher, you can’t ignore the policies.
A few examples of the rules you may need to obey:</p>

<ul>
  <li>All reports must follow the official PowerPoint template</li>
  <li>Every meeting requires written minutes sent to all participants</li>
  <li>Job candidates must pass through the full HR pipeline</li>
  <li>Employees must re-certify their skills on a fixed schedule</li>
</ul>

<p>All of the above seem reasonable—just like prison rules.
The difference is your attitude toward them.</p>

<p>They are either a <strong>framework</strong> for your career or an inevitable <strong>evil</strong>.
You either feel happy when you do what’s required, or feel annoyed and do it just because it’s required.
You either fill out all the forms completely, or you cut every possible corner to get back to the real work.
You either read an email copied to 25 people to not miss anything or immediately delete it.
You either attend all meetings or learn to be creative in finding reasons why you can’t.</p>

<p>You are either red or black.
Once you find your <strong>identity</strong>, you start despising the other side.</p>

<p>If you are red, you don’t understand the black employees who are constantly rebelling.
They rebel against the rules you so much enjoy following.
You see them as dishonest, disloyal, and selfish sociopaths.</p>

<p>If you are black, you despise the red employees who are trying so hard to associate themselves with the system.
They study the rules and compete against each other—who knows them better.
You see them as <a href="/2017/08/22/to-be-nice-or-not.html">shallow</a> and incompetent <a href="/2021/03/03/imposters-to-win.html">impostors</a>.</p>

<p>Peace is not possible.
In any large organization, reds will always dominate—it’s inevitable.
The system needs them, and they thrive inside it.
Blacks will always be a minority, surviving at the edges.</p>

<p>If you are black, don’t waste energy trying to convert or fight the reds.
You won’t win.
The only strategy is distance.
Minimize contact, keep your head down when necessary, and focus on delivering real value where it matters.
Reds will spend their lives climbing the corporate ladder.
Blacks must learn to survive in the shadows of that ladder, working for the customer, not the boss.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="management" /><category term="mood" /><summary type="html"><![CDATA[In big organizations, reds obey bosses while blacks serve customers—and blacks survive only by keeping their distance.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/09/cold-summer-1953.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/09/cold-summer-1953.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">The End of Type Annotations</title><link href="https://www.yegor256.com/2025/08/17/type-annotations.html" rel="alternate" type="text/html" title="The End of Type Annotations" /><published>2025-08-17T00:00:00+00:00</published><updated>2025-08-17T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/08/17/type-annotations</id><content type="html" xml:base="https://www.yegor256.com/2025/08/17/type-annotations.html"><![CDATA[<p>Type annotations are what make statically typed object-oriented languages like Java run <strong>faster</strong> and <strong>safer</strong>.
Without annotations, every variable would effectively collapse to <code class="language-plaintext highlighter-rouge">Object</code>, forcing runtime casts.
The code would work, but slower and with more runtime errors.
Some type annotations may be inferred instead of being explicitly specified by a programmer.
Not all though.
In Java, for example, a number of hard-to-resolve challenges prevent us from inferring types of all objects.
This is not a fundamental limitation of OOP itself.
It’s a result of design trade-offs in Java and similar languages.
In a perfect object-oriented language, all variable types would be inferrable.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Swingers (1996) by Doug Liman" src="/images/2025/08/swingers.jpg" longdesc="#4225221a" /><figcaption id="4225221a">Swingers (1996) by Doug Liman</figcaption></figure>

<p>Imagine a simple Java method:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Price priceOfDelivery(Book book, City city) {
  Price price = book.price();
  Delivery delivery = new Delivery(price, city);
  return delivery.price();
}
</code></pre></div></div>

<p>Two reasons justify the usage of <code class="language-plaintext highlighter-rouge">Book</code>, <code class="language-plaintext highlighter-rouge">City</code>, <code class="language-plaintext highlighter-rouge">Price</code>, and <code class="language-plaintext highlighter-rouge">Delivery</code> type annotations:
Compilers and programmers need help.</p>

<h2 id="type-annotations-are-helpful">Type Annotations Are Helpful</h2>

<p>First, we help the compiler eliminate some <strong>dynamic dispatches</strong> in favor of static calls.
If the <code class="language-plaintext highlighter-rouge">Book</code> is a class, not an interface, the <code class="language-plaintext highlighter-rouge">book.price()</code> call may be compiled into a jump to an absolute address.
Without information about the <code class="language-plaintext highlighter-rouge">book</code>’s class, <code class="language-plaintext highlighter-rouge">.price()</code> goes to a virtual table first, finds the address, and only then jumps.
The second scenario is more expensive.
The type annotation attached to <code class="language-plaintext highlighter-rouge">book</code> helps avoid it.</p>

<p>Second, we help ourselves write safe code, avoiding “Method not found” <strong>runtime errors</strong>.
If <code class="language-plaintext highlighter-rouge">book</code> is not annotated as <code class="language-plaintext highlighter-rouge">Book</code>, we may mistakenly pass <code class="language-plaintext highlighter-rouge">Integer</code>, meaning the book’s ID in the database.
At compile time, that would lead to no errors.
Later, at runtime, we get an error when <code class="language-plaintext highlighter-rouge">.price()</code> is not found in the virtual table of the <code class="language-plaintext highlighter-rouge">Integer</code> class.</p>

<p>However, both compilers and programmers can improve.</p>

<h2 id="compilers-can-do-better">Compilers Can Do Better</h2>

<p>Sometimes, a compiler can infer the type of a variable, without an explicit annotation.
For example, this code compiles in Java, starting from version 10:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Price priceOfDelivery(Book book, City city) {
  var price = book.price();
  var delivery = new Delivery(price, city);
  return delivery.price();
}
</code></pre></div></div>

<p>The type annotation used in earlier Java versions is replaced with the <code class="language-plaintext highlighter-rouge">var</code> keyword.</p>

<p>In a small piece of code such as this one, the compiler can <strong>infer</strong> types.
However, it may fall short with the <code class="language-plaintext highlighter-rouge">book</code> and <code class="language-plaintext highlighter-rouge">city</code> parameters.
In the general case, type inference is not decidable for Java programs.
Because of generics, method overloading, reflection, and … complexity.</p>

<p>The complexity is the technical obstacle.
The compiler can’t infer types for all variables because it would be too expensive to analyze the whole program.
Instead, it compiles file by file.
Even if the compiler had the whole program, inference in Java would still hit undecidability in the general case.
File-by-file compilation makes this even more restrictive.</p>

<p>All other barriers, such as generics, the compiler can’t overcome:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>void print(List&lt;?&gt; items) {
  var x = items.get(0); // What is the type?
}
</code></pre></div></div>

<p>No matter how hard the compiler tries, in the general case, this question doesn’t have an answer.</p>

<h2 id="programmers-can-do-better">Programmers Can Do Better</h2>

<p>We, programmers, can help the compiler infer types.</p>

<p>For example, we can stop using generics.
Instead of <code class="language-plaintext highlighter-rouge">List&lt;Book&gt;</code> we can have a <code class="language-plaintext highlighter-rouge">Library</code> and instead of <code class="language-plaintext highlighter-rouge">Map&lt;User, Phone&gt;</code> we can have a <code class="language-plaintext highlighter-rouge">PhoneBook</code>.
It’s easier to infer the type of the object taken from a <code class="language-plaintext highlighter-rouge">Library</code> versus the object taken from a generic <code class="language-plaintext highlighter-rouge">List</code>.</p>

<p>We can also stop using method overloading.
Instead of <code class="language-plaintext highlighter-rouge">print(String x)</code> and <code class="language-plaintext highlighter-rouge">print(Integer x)</code> we can create <code class="language-plaintext highlighter-rouge">printString(x)</code> and <code class="language-plaintext highlighter-rouge">printInteger(x)</code>.
Types of parameters are easier to infer in more specialized methods.</p>

<p>We can also stop using reflection.</p>

<aside class="quote">The easier it is to infer the type of a variable for a compiler, the faster the programmer gets the semantics of it too.
</aside>

<p>Java programmers may not be ready for such a <strong>radical move</strong>.
However, if they were, they would not only help the compiler but themselves too.
Eliminating type annotations makes code shorter and, because of that, cleaner.
This is why <code class="language-plaintext highlighter-rouge">var</code> syntax was introduced in Java 10.</p>

<p>In the code above, variable names are nouns.
In well-written code, nouns as names are <a href="/2015/01/12/compound-name-is-code-smell.html">sufficient</a> to disambiguate variables.
No need to call it <code class="language-plaintext highlighter-rouge">cityOfDelivery</code> or <code class="language-plaintext highlighter-rouge">bookToDeliver</code>.
Just <code class="language-plaintext highlighter-rouge">book</code> and <code class="language-plaintext highlighter-rouge">city</code> are enough.</p>

<p>We also named variables by their types: a <code class="language-plaintext highlighter-rouge">book</code> is of type <code class="language-plaintext highlighter-rouge">Book</code>, and so on.
By looking at the name of the variable we can tell its type.
The <code class="language-plaintext highlighter-rouge">Book</code> type annotation looks like a syntactical redundancy.
It only leads to lower code readability, by making it longer.
It’s reasonable to expect type inference to free our programs from this redundancy.</p>

<p>Thus, better type inference means better <strong>readability</strong> of the code.</p>

<h2 id="languages-can-do-better">Languages Can Do Better</h2>

<p>Languages like Haskell and the ML family prove that full type inference is achievable.
However, they still need annotations for edge cases.
Rust takes a middle ground.
It infers local variable types but enforces explicit annotations at public interfaces.
Go, until recently, avoided generics, operator overloading, and heavy reflection, making inference straightforward.
However, it forces programmers to annotate all public boundaries—function signatures, struct fields, and interfaces.</p>

<aside class="quote">If the type of a variable can’t be inferred, compilation fails.
</aside>

<p>I suggest taking one step forward and designing a language that doesn’t have any type annotations.
Such a language should not have generics, method overloading, reflection, and everything else that prevents 100% type inference.
Then, we must design a compiler for this language that compiles the entire program, not single files.</p>

<p>The language may be as strict as this:
If the type of a variable can’t be inferred, compilation fails.</p>

<p>This is how the book price snippet would look in such a language:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>priceOfDelivery(book, city) {
  p = book.price();
  d = new Delivery(p, city);
  return d.price();
}
</code></pre></div></div>

<p>To me, this seems to be much more readable than the original code in Java.</p>

<p>Compilation time remains a limitation though.
We turn this issue into an opportunity.
Programmers are forced, by the timing limitations of the compiler, to write smaller modules.
When they need larger programs, they break them into modules that communicate via <a href="https://en.wikipedia.org/wiki/Inter-process_communication">IPC</a> instead of staying in a monolithic binary.</p>

<p>We’re experimenting with this approach in <a href="https://www.eolang.org">EOLANG</a>, a language designed to maximize inference by eliminating features that make it undecidable.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html"><![CDATA[Type annotations are a workaround for compiler limitations, not a feature—a well-designed language should infer all types automatically, forcing programmers to write smaller, cleaner modules.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/08/swingers.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/08/swingers.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">remove(42) vs. find(42).remove()</title><link href="https://www.yegor256.com/2025/06/22/retrieve-or-remove.html" rel="alternate" type="text/html" title="remove(42) vs. find(42).remove()" /><published>2025-06-22T00:00:00+00:00</published><updated>2025-06-22T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/06/22/retrieve-or-remove</id><content type="html" xml:base="https://www.yegor256.com/2025/06/22/retrieve-or-remove.html"><![CDATA[<p>We have a list of books in the <code class="language-plaintext highlighter-rouge">books</code> object.
How do we remove a single book from it, given that we know its ID?
We can do <code class="language-plaintext highlighter-rouge">books.removeById(42)</code>.
Alternatively, we can find it with <code class="language-plaintext highlighter-rouge">books.findById(42)</code> and then call <code class="language-plaintext highlighter-rouge">b.remove()</code>.
Which option should we prefer, and why?
The second choice is the better one.
Not only because it’s more object-oriented, but also due to several practical advantages.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="8 Femmes (2002) by François Ozon" src="/images/2025/06/8-femmes.jpg" longdesc="#d7e21337" /><figcaption id="d7e21337">8 Femmes (2002) by François Ozon</figcaption></figure>

<h2 id="extending-the-deletion-behavior">Extending the Deletion Behavior</h2>

<p>What if we want to extend the deletion algorithm?
For example, suppose we want to print a log message every time a book is deleted.</p>

<p>If we follow the <a href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle">open-closed principle</a>, we should avoid modifying the existing <code class="language-plaintext highlighter-rouge">Book</code> or <code class="language-plaintext highlighter-rouge">Books</code> classes.
Instead, we want to either <a href="/2016/09/13/inheritance-is-procedural.html">extend</a> or <a href="/2015/02/26/composable-decorators.html">decorate</a> them.
A decorator is the ideal choice if we want to avoid <a href="/2016/09/13/inheritance-is-procedural.html">implementation inheritance</a>.</p>

<p>If we use <code class="language-plaintext highlighter-rouge">removeById()</code>, we must decorate the <code class="language-plaintext highlighter-rouge">books</code> object.
If we use <code class="language-plaintext highlighter-rouge">remove()</code>, we can decorate the individual book retrieved via <code class="language-plaintext highlighter-rouge">findById()</code>.
The latter approach may be more <strong>cohesive</strong>, since its decoratee is likely <strong>smaller</strong> and more <strong>focused</strong>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">=</span> <span class="n">books</span><span class="p">.</span><span class="nf">findById</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="n">b</span> <span class="o">=</span> <span class="no">Logged</span><span class="p">.</span><span class="nf">new</span><span class="p">(</span><span class="n">b</span><span class="p">)</span>
<span class="n">b</span><span class="p">.</span><span class="nf">remove!</span>
</code></pre></div></div>

<h2 id="handling-missing-or-non-deletable-books">Handling Missing or Non-Deletable Books</h2>

<p>What if the book isn’t found, or can’t be deleted?
The <code class="language-plaintext highlighter-rouge">removeById()</code> approach doesn’t support the <a href="https://en.wikipedia.org/wiki/Null_object_pattern">Null Object</a> pattern well.
It forces us to throw an exception—or worse, return <code class="language-plaintext highlighter-rouge">false</code>, which goes <a href="/2018/08/22/builders-and-manipulators.html">against</a> the <a href="https://en.wikipedia.org/wiki/Command%E2%80%93query_separation">CQS</a> principle.</p>

<p>On the other hand, returning an object, even a <a href="https://en.wikipedia.org/wiki/Null_object_pattern">null</a> or <a href="/2014/09/23/built-in-fake-objects.html">fake</a> object, offers more <strong>flexible error handling</strong>.
For instance, we can access <code class="language-plaintext highlighter-rouge">title()</code> safely, knowing that the book was found successfully—or catch and <a href="https://en.wikipedia.org/wiki/Exception_chaining">re-raise exceptions</a> with <a href="/2015/12/01/rethrow-exceptions.html">more context</a>:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">=</span> <span class="n">books</span><span class="p">.</span><span class="nf">findById</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="k">begin</span>
  <span class="n">b</span><span class="p">.</span><span class="nf">remove!</span>
<span class="k">rescue</span> <span class="n">e</span>
  <span class="k">raise</span> <span class="n">e</span><span class="p">,</span> <span class="s2">"Can't delete book </span><span class="si">#{</span><span class="n">b</span><span class="p">.</span><span class="nf">title</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
</code></pre></div></div>

<h2 id="decoupling-retrieval-and-deletion">Decoupling Retrieval and Deletion</h2>

<p>What if the retrieval and deletion of the object happen far apart in the code?</p>

<p>If <code class="language-plaintext highlighter-rouge">books</code> knows how to find, and a <code class="language-plaintext highlighter-rouge">book</code> knows how to delete, we keep responsibilities nicely separated.
It also allows the book to be immutable and encapsulate its own ID, reducing <a href="/2016/11/21/naked-data.html">leakage</a> of internal data:</p>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">b</span> <span class="o">=</span> <span class="n">books</span><span class="p">.</span><span class="nf">findById</span><span class="p">(</span><span class="mi">42</span><span class="p">)</span>
<span class="c1"># +100 lines here...</span>
<span class="n">b</span><span class="p">.</span><span class="nf">remove!</span>  <span class="c1"># DELETE FROM book WHERE id = 42</span>
<span class="c1"># +200 lines here...</span>
<span class="k">if</span> <span class="n">b</span><span class="p">.</span><span class="nf">exists?</span>  <span class="c1"># SELECT * FROM book WHERE id = 42</span>
  <span class="nb">puts</span> <span class="s2">"The book is back to the library!"</span>
<span class="k">end</span>
</code></pre></div></div>

<p>Once the ID is wrapped inside the book by <code class="language-plaintext highlighter-rouge">findById()</code>, it never has to <strong>leak out</strong> again.
This reduces the amount of <a href="/2016/11/21/naked-data.html">naked data</a> exposed to parts of the code that don’t need it.</p>

<p>The less data is visible, the <a href="/2016/11/21/naked-data.html">better</a> the design—at least from an OOP perspective.</p>

<p>Thus, using <code class="language-plaintext highlighter-rouge">findById()</code> followed by <code class="language-plaintext highlighter-rouge">remove()</code> embraces object-oriented principles more fully.
It allows for cleaner extension, better error handling, and tighter encapsulation.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html"><![CDATA[Delegating behavior to objects rather than invoking utility methods leads to cleaner, more extensible, and properly encapsulated object-oriented design.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/06/8-femmes.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/06/8-femmes.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Write Unit Tests, Don’t Waste Our Money!</title><link href="https://www.yegor256.com/2025/06/08/pull-request-without-test.html" rel="alternate" type="text/html" title="Write Unit Tests, Don’t Waste Our Money!" /><published>2025-06-08T00:00:00+00:00</published><updated>2025-06-08T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/06/08/pull-request-without-test</id><content type="html" xml:base="https://www.yegor256.com/2025/06/08/pull-request-without-test.html"><![CDATA[<p>Automated tests help us write code <a href="/angry-tests.html">faster</a>.
Unit tests immediately <a href="/2022/07/05/safety-net.html">tell us</a> when we break something.
Integration tests calm us down, reducing the fear of shipping a failure to a user.
But who are “us”?
Programmers.
What about our employers?
How do automated tests help them?
Automated tests protect their <strong>investments</strong>.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="La Femme Nikita (1990) by Luc Besson" src="/images/2025/06/la-femme-nikita.jpg" longdesc="#ccb58518" /><figcaption id="ccb58518">La Femme Nikita (1990) by Luc Besson</figcaption></figure>

<p>Every change we make to a codebase costs our employer money.
Whether they pay us <a href="/2015/07/21/hourly-pay-modern-slavery.html">monthly</a>
  or <a href="/2014/04/11/cost-of-loc.html">per line of code</a>, the bottom line is the same:
  it’s the code that reaches the repository and is eventually released to the end user.</p>

<p>That’s what the business is investing in—new features <a href="/2018/07/24/bugs-or-pull-requests.html">or</a> bug fixes.
The code that’s written and shipped is what matters to them.</p>

<p>Even when they say they’re investing in people, what they really want is the code.
People are merely an intermediate by-product.
The ultimate asset is the codebase.</p>

<p>They want to <strong>protect</strong> that <strong>asset</strong>.</p>

<p>A loss of investment could be a hundred lines written today not working tomorrow.
Think about it this way: we expect a car to work after paying the body shop to fix it.
We don’t mind paying again if something else breaks—but not if it’s the exact same part they fixed yesterday.
We expect the repaired part to function properly while driving.
We want a warranty on what’s already been fixed.</p>

<aside class="quote">People are merely an intermediate by-product—the ultimate asset is the codebase.
</aside>

<p>Similarly, our employers expect our code to work once we’ve committed it and collected our paycheck.
They want a warranty that the code won’t break again once it’s been fixed.
Automated tests can offer that <strong>warranty</strong>.</p>

<p>Continuing the metaphor: “driving” a codebase means actively modifying its parts—refactoring or extending.
The more aggressively we drive it, the higher the risk of breaking something.
The parts of the code not covered by tests are the first to break.</p>

<p>Test coverage guarantees that what worked before—and was already paid for—continues to work even under the stress of refactoring.</p>

<p>So, any contribution to a codebase without a <strong>supporting</strong> test is a waste of the employer’s money.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="etiquette" /><category term="testing" /><summary type="html"><![CDATA[If you write code without tests, you're probably wasting your employer's money---because it'll break again right where you "fixed" it.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/06/la-femme-nikita.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/06/la-femme-nikita.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Good Title — Good Bug Report</title><link href="https://www.yegor256.com/2025/05/31/good-bug-title.html" rel="alternate" type="text/html" title="Good Title — Good Bug Report" /><published>2025-05-31T00:00:00+00:00</published><updated>2025-05-31T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/05/31/good-bug-title</id><content type="html" xml:base="https://www.yegor256.com/2025/05/31/good-bug-title.html"><![CDATA[<p>A few weeks ago, <a href="https://github.com/horw">@horw</a> released a new GitHub plugin that fixes GitHub issue titles: <a href="https://github.com/horw/issue-title-ai">issue-title-ai</a>.
Once an issue is created, the plugin asks <a href="https://chatgpt.com">ChatGPT</a>—or <a href="https://www.deepseek.com/">DeepSeek</a>, or <a href="https://claude.ai/">Claude</a>—to improve its title.
We’ve already integrated the plugin into <a href="https://github.com/objectionary/eo">objectionary/eo</a> and a few other repositories.
Works like a charm.
What’s wrong with the titles the way they are, you may ask?
Why do we need to ask ChatGPT to make them “better”?
Because we want every issue—either a bug report, a feature request, or a question—to be formulated as a <a href="/2025/05/25/bug-driven-development.html">complaint</a>.
It seems that very few of us can do it on the first try.
The help of AI is appreciated.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Flawless (1999) by Joel Schumacher" src="/images/2025/05/flawless.jpg" longdesc="#6699c6ab" /><figcaption id="6699c6ab">Flawless (1999) by Joel Schumacher</figcaption></figure>

<p>Let’s say, you try to download a PNG file from a web app, but get a text file instead.
You want to report this problem to the team.
How would you title such a bug report?
Pick one, out of these eight:</p>

<ul>
  <li>“CSV”</li>
  <li>“CSV file downloading”</li>
  <li>“Please, fix CSV-file downloading”</li>
  <li>“CSV downloading must be fixed”</li>
  <li>“Why I get text file instead of PNG?”</li>
  <li>“How can I download PNG file?”</li>
  <li>“I need text file, not PNG”</li>
  <li>“PNG downloading is broken, getting CSV instead”</li>
</ul>

<p>There may be even more variations… but the best is the last one.
It clearly states that something is <strong>broken</strong>.
It demands a fix.</p>

<p>Even if it’s a feature request or a question, it should be filed as a complaint.
This rule—known as <a href="/2025/05/25/bug-driven-development.html">bug driven development</a>—increases our productivity.
In every request made to the team we have to explain the difference between our expectations and reality.
The lack of such an explanation seems to be the primary source of confusion and frustration in task tracking.</p>

<p>Apparently, very few programmers have this skill: formulating a problem as a complaint.
AI should help us.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="etiquette" /><category term="testing" /><summary type="html"><![CDATA[ChatGPT helps us re-format GitHub issue titles after their authors submit them --- helping developers understand their tasks better.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/05/flawless.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/05/flawless.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Stop Asking and Suggesting — Just Complain</title><link href="https://www.yegor256.com/2025/05/25/bug-driven-development.html" rel="alternate" type="text/html" title="Stop Asking and Suggesting — Just Complain" /><published>2025-05-25T00:00:00+00:00</published><updated>2025-05-25T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/05/25/bug-driven-development</id><content type="html" xml:base="https://www.yegor256.com/2025/05/25/bug-driven-development.html"><![CDATA[<p>Wikipedia <a href="https://en.wikipedia.org/wiki/Tester-driven_development">says</a> that Bug Driven Development (BDD) is an anti-pattern.
<a href="https://github.com/rajakolluru">Raja Shankar Kolluru</a> perfectly <a href="https://itmusings.com/bug-driven-development/">explains</a> why.
However, <a href="https://github.com/FlorianRappl">Florian Rappl</a> <a href="https://www.florian-rappl.de/News/Page/227/bug-driven-development">argues</a> that it’s not.
<a href="https://github.com/benwinding">Ben Winding</a> <a href="https://blog.benwinding.com/bug-driven-development-sometimes-its-the-best-choice/">believes</a> that it’s better than TDD.
In simple words, BDD is kind of like trying to build a plane while it’s flying, based on passenger complaints.
Nobody builds planes like that (well, maybe <a href="https://spectrum.ieee.org/how-the-boeing-737-max-disaster-looks-to-a-software-developer">Boeing</a> and <a href="https://www.theguardian.com/technology/2015/may/20/airbus-issues-alert-software-bug-fatal-plane-crash">Airbus</a>).
However, a software team that practices BDD might demonstrate higher productivity.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Ghost Dog (1999) by Jim Jarmush" src="/images/2025/05/ghost-dog.jpg" longdesc="#32d0d0e9" /><figcaption id="32d0d0e9">Ghost Dog (1999) by Jim Jarmush</figcaption></figure>

<p>A software team does BDD if it follows one simple principle:
Every piece of work is formulated as a <strong>complaint</strong>.</p>

<p>It started <a href="https://www.researchgate.net/publication/2559439_An_Overview_of_the_Software_Engineering_Process_and_Tools_in_the_Mozilla_Project">in 2002</a>, by Mozilla:</p>

<blockquote>
  <p>Every code change in the Mozilla codebase is made as part of a “fix” for a uniquely numbered “bug.” Though it commonly has a pejorative connotation, in the Mozilla Project the term bug is used to refer to any filed request for modification in the software, be it an actual defect, an enhancement, or a change in functionality.</p>
</blockquote>

<p>If you listen to Mozilla’s advice, you won’t have feature requests, or questions, or tasks in your <a href="https://en.wikipedia.org/wiki/Issue_tracking_system">issue tracking system</a>.
Only bug reports.
They may sound like “The wing is on fire!”—a perfect complaint—or “A plane doesn’t have a jacuzzi!”—a perfect feature request in the form of a complaint.
Questions may also look like complaints: “It is unclear how to fasten the belt.”
Whether they are coming from testers or customers, the format is the same: “I don’t like it.”</p>

<p>The primary benefit that BDD can give to a project is <strong>noise reduction</strong>.
I can think of two reasons for that:</p>

<ol>
  <li>
    <p>Complaints, due to their rather aggressive nature, require their authors to provide strong arguments to back them up.
They must think twice before submitting a ticket that accuses the codebase of being broken or imperfect.
They must be specific and precise.
No noise.</p>
  </li>
  <li>
    <p>Similarly, programmers must convince a complainant that the problem is resolved.
They can’t close the ticket with just a text answer.
They need to demonstrate a reasonably significant contribution to the codebase.
No noise.</p>
  </li>
</ol>

<p>A good complaint identifies a <strong>flaw</strong> in something tangible.
A good resolution of a good complaint is a <strong>patch</strong> to that tangible something.
Obviously, in a software project, the <strong>source code</strong> is what is tangible.</p>

<aside class="quote">Bug tracker is not a support line for your coding troubles.
</aside>

<p>In a disciplined team, every ticket is a bug report that addresses a flaw in the source code.
Every bug report leads to a patch—a contribution to the source code.
No noise.
The team is focused and demonstrates the best possible productivity.</p>

<p>BDD also has a major drawback.
It may be hard to train the team to use it.
The adoption of BDD may require a change of their <strong>mindset</strong>.
They must switch from noise-makers to flaw-finders.</p>

<p><a href="https://blog.codinghorror.com/about-me/">Jeff Atwood</a>, in his blog post about <a href="https://blog.codinghorror.com/complaint-driven-development/">complaint-driven development</a>, explains it from a business point of view.
He suggests that instead of implementing what you believe is right, it’s better to give your customers a rough draft and let them complain.
You’re most often wrong about what they’ll actually complain about.
The more they complain, the better you listen, the bigger the value you deliver.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="etiquette" /><category term="testing" /><summary type="html"><![CDATA[When every piece of work is framed as a bug report --- including feature requests and questions --- a software team may become more productive.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/05/ghost-dog.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/05/ghost-dog.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">No BTW in Bug Reports</title><link href="https://www.yegor256.com/2025/05/18/bug-reports-as-contracts.html" rel="alternate" type="text/html" title="No BTW in Bug Reports" /><published>2025-05-18T00:00:00+00:00</published><updated>2025-05-18T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/05/18/bug-reports-as-contracts</id><content type="html" xml:base="https://www.yegor256.com/2025/05/18/bug-reports-as-contracts.html"><![CDATA[<p>Every ticket—a bug report or a feature request—is a short-term contract.
You, the reporter, hire them to make a fix or implement a feature.
They, the team of developers, do it for you—provided you pay, or their motivation is intrinsic—for example, in open source.
The discussion that happens along the way may help clarify the requirements of the contract.
It may also help the team convince you that the bug doesn’t deserve a fix.
Also, it may help them deliver the fix to you and convince you to close the ticket.
However, the discussion may also <strong>distract</strong> both parties if it loses focus.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Bronx Tale (1993) by Robert De Niro" src="/images/2025/05/bronx-tale.jpg" longdesc="#f1eb3b02" /><figcaption id="f1eb3b02">Bronx Tale (1993) by Robert De Niro</figcaption></figure>

<p>This is how it happens:</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Bug #42: The CSV file is saved in the wrong format.
Team: Can you provide an example?
You: Sure, here it is (attached).
Team: Looks like quotes are missing, we'll fix it.
You: BTW, why does the file have no header line?
Team: This is another problem, report it separately.
</code></pre></div></div>

<p>Indeed, the missing header line might also be a bug.
It’s related to the issue you just reported—but it’s not part of the contract you’ve established with the team.
Answering your question could distract them and blur their focus.
You don’t want that.
You want them to stay focused on the problem at hand.</p>

<p>A few more good recipes to distract them:</p>

<ul>
  <li>
    <p>“<strong>BTW</strong>, it would be great to have another feature that…”</p>
  </li>
  <li>
    <p>“<strong>BTW</strong>, why this code is designed this way?”</p>
  </li>
  <li>
    <p>“<strong>BTW</strong>, I wonder, how this works?”</p>
  </li>
</ul>

<p>All of these questions, complaints and suggestions are perfect candidates for new bug reports.</p>

<p>You might think a ticket is an opportunity to <a href="/2014/10/07/stop-chatting-start-coding.html">chat</a> with the team.
They’re already responding—so why not ask all your questions while you have their attention?
It feels like they’re interested, so you don’t want to lose the momentum.
But that’s a false assumption.
They’re <a href="/2014/11/24/principles-of-bug-tracking.html">not motivated</a> to keep the discussion open.
What they really want is to close the ticket—ASAP.
Dragging out the conversation only risks <strong>annoying</strong> them.</p>

<aside class="quote">Nothing hurts a software team more than a silent customer and an empty bug tracker.
</aside>

<p>You might also believe that submitting a ticket offends the team.
They already have a lot of work to do—why bother them with even more?
Every bug report or feature request might seem like an extra burden on their shoulders.
But again, that’s a false belief.
Bug reports are the <a href="/2018/02/06/where-to-find-more-bugs.html">fuel</a> for their engines.
They <a href="/2014/04/13/bugs-are-welcome.html">need</a> your tickets.
First, because they help clarify requirements.
Second, because they provide a sense that their work is <strong>needed</strong> and <strong>appreciated</strong>.
Nothing hurts a software team more than a silent customer and an empty bug tracker.</p>

<p>So, avoid saying “BTW” when talking to the team in a ticket.
Stick to requesting a fix for the bug you originally reported.
If something else comes to mind along the way—whether it’s a question, another bug, or a feature request—submit a <strong>new ticket</strong>.
We—and <a href="https://www.researchgate.net/publication/2559439_An_Overview_of_the_Software_Engineering_Process_and_Tools_in_the_Mozilla_Project">Mozilla</a>—believe that every ticket should be a <a href="/2018/04/24/right-way-to-report-bugs.html">bug report</a>.</p>

<p>You might also consider moving the conversation to a mailing list, as <a href="https://producingoss.com/da/bug-tracker-usage.html">suggested by Karl Fogel</a>.
Or even to Slack or Telegram.
But I <a href="/2016/08/23/communication-maturity.html">don’t recommend</a> it.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="testing" /><category term="etiquette" /><summary type="html"><![CDATA[Keep your ticket focused---one issue per report, no distractions, no "by the way"---this is how you help your team achieve higher efficiency.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/05/bronx-tale.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/05/bronx-tale.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Let the Bug Reporter Have the Last Word</title><link href="https://www.yegor256.com/2025/04/24/dont-close-their-tickets.html" rel="alternate" type="text/html" title="Let the Bug Reporter Have the Last Word" /><published>2025-04-24T00:00:00+00:00</published><updated>2025-04-24T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/04/24/dont-close-their-tickets</id><content type="html" xml:base="https://www.yegor256.com/2025/04/24/dont-close-their-tickets.html"><![CDATA[<p>Someone has submitted a bug report to your repository.
You fix the bug.
You close the bug report.
Stop.
This is wrong.
You shouldn’t close it.
Instead, you should ask the reporter to review your fix.
Then, maybe, they will close the ticket.
If they don’t, you make another fix, until they do.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Analyze This (1999) by Harold Ramis" src="/images/2025/04/analyze-this.jpg" longdesc="#96fc5703" /><figcaption id="96fc5703">Analyze This (1999) by Harold Ramis</figcaption></figure>

<p>According to <a href="https://www.joelonsoftware.com/2000/11/08/painless-bug-tracking/">Joel Spolsky</a>, “the only person who can close a bug is the person who opened it in the first place.”
But, why?
Why shouldn’t you close it, when it’s obvious that the bug is fixed?
There are at least three reasons.</p>

<p>First, this is <strong>offensive</strong> and <strong>demotivating</strong>.
Why do I report a bug or suggest a feature?
Because I’m not happy with your code in its current state.
Something is broken or doesn’t work as expected.
I want you to fix it to make me happy.
I want you to confirm with me whether your fix has made me happy.
If you don’t ask and simply close the ticket, I <strong>feel</strong> like I’m being <strong>ignored</strong>.
Why would I bother reporting another bug or feature request?</p>

<p>Second, this is a <strong>quality threat</strong>.
Quality is always a product of conflict.
The most productive conflict is the one between programmers and testers.
Testers try to prove that the software is bad by submitting bug reports.
Programmers try to prove that the software is good by covering it with tests.
If you close without confirmation from the reporter, you don’t give them a chance to argue with you.
Of course, they may shrug their shoulders and reopen the ticket.
However, not everybody will do this, trying to avoid being disrespectful or simply not having enough permission.
In the end, no formal acceptance—no quality.</p>

<p>Third, this leads to ticket <strong>duplication</strong>.
Most bug reporters won’t argue when you close their tickets without asking their permission.
Instead, they will open new tickets with exactly the same or a similar description.
The most disciplined will refer to the original ticket.
Others will fill up the backlog with duplicates, making it messy.</p>

<hr />

<p>There are a few exceptions, though.
If the ticket is an obvious duplicate, you close it right away.
No need to ask its author for permission.
If it’s a question—not a bug report—you close it with an answer.
Also, if you aren’t planning to fix it, attach the <code class="language-plaintext highlighter-rouge">won't fix</code> badge to it and close.</p>

<p>P.S. I suggest avoiding <a href="https://docs.github.com/en/issues/tracking-your-work-with-issues/using-issues/linking-a-pull-request-to-an-issue">automatic issue closing</a> on pull request merge.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oss" /><category term="etiquette" /><summary type="html"><![CDATA[Even if the fix looks obvious to you, don't close the bug report; instead, let its author do this after your request.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/04/analyze-this.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/04/analyze-this.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">We Don’t Merge into a Broken Master Branch</title><link href="https://www.yegor256.com/2025/04/19/dont-merge-into-broken-master.html" rel="alternate" type="text/html" title="We Don’t Merge into a Broken Master Branch" /><published>2025-04-19T00:00:00+00:00</published><updated>2025-04-19T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/04/19/dont-merge-into-broken-master</id><content type="html" xml:base="https://www.yegor256.com/2025/04/19/dont-merge-into-broken-master.html"><![CDATA[<p>What do you think is the most typical reason for delays in pull request reviews?
A <a href="https://doi.org/10.1145/3183519.3183525">study</a> at Google confirms that it’s the size—the more changes, the slower the review.
Another <a href="https://doi.org/10.1109/ACCESS.2020.3002663">study</a> shows that it’s the emotional tone—anger and dominance expressed in comments are linked to a lower likelihood of a pull request being merged.
A more recent <a href="https://doi.org/10.1016/j.jss.2020.110806">study</a> finds that it’s the author’s reputation: we merge PRs faster if we know the author.
All of the above is true.
In our projects, though, what often slows down PR reviews is the message: <strong>“CI failures are not related to my changes!”</strong></p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Eye of the Beholder (1999) by Stephan Elliott" src="/images/2025/04/eye-of-the-beholder.jpg" longdesc="#343da90e" /><figcaption id="343da90e">Eye of the Beholder (1999) by Stephan Elliott</figcaption></figure>

<p>Here’s how it happens:
You fork a repo.
You make changes to fix a bug or introduce a new feature.
You commit them and push.
You submit a pull request.
You realize that some GitHub CI jobs fail.
You read the logs.
You don’t see any relevance between the error messages and your edits.
You post a comment: “CI failures are not related to my changes!”
You expect us to merge your pull request.</p>

<p>Why shouldn’t we?</p>

<p>We don’t merge them.
We ask you to step back—to the point before you started making changes.
Don’t make them yet.
Instead, check the build status of the repository.
Pay attention to all CI jobs, not just the one running Maven.
They all must be green.
Only when all jobs are green should you start editing the code.
If any job is red, report a bug and wait until the team gets everything passing.</p>

<p>Why?
Because we try to reduce the effort required to fix the build.
The more changes we pile onto a broken build, the higher the cost of cleaning it up.
When the build is broken, we accept no new changes—except those that fix the build.</p>

<p>What if the team takes too long to fix it?
What if the build never becomes green?
Still—you wait.
You don’t submit a pull request to a repository with a broken build.</p>

<hr />

<p>You may fix the build yourself.
If you do, submit it in a <strong>separate</strong> pull request.
Don’t mix build-fixing changes with any other edits.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oss" /><category term="etiquette" /><summary type="html"><![CDATA[If the build is broken, don't send any pull requests until it's fixed. You're welcome to fix it yourself---just don't mix build-fixing changes with anything else.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/04/eye-of-the-beholder.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/04/eye-of-the-beholder.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>