<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://www.yegor256.com/rss.xml" rel="self" type="application/atom+xml" /><link href="https://www.yegor256.com/" rel="alternate" type="text/html" /><updated>2025-04-18T10:43:42+00:00</updated><id>https://www.yegor256.com/rss.xml</id><title type="html">Yegor Bugayenko</title><subtitle>Yegor Bugayenko</subtitle><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><entry><title type="html">Four Builds: A Balance Between Quality and Joy</title><link href="https://www.yegor256.com/2025/04/12/four-builds.html" rel="alternate" type="text/html" title="Four Builds: A Balance Between Quality and Joy" /><published>2025-04-12T00:00:00+00:00</published><updated>2025-04-12T00:00:00+00:00</updated><id>https://www.yegor256.com/2025/04/12/four-builds</id><content type="html" xml:base="https://www.yegor256.com/2025/04/12/four-builds.html"><![CDATA[<p>How long should it take to know if your code is safe?
Martin Fowler once <a href="http://martinfowler.com/articles/continuousIntegration.html">said</a>: 10 minutes.
Ten years later, five hundred developers <a href="https://doi.org/10.1145/3106237.3106270">agreed</a>.
I disagree—with all of them.
First, ten minutes is not enough for a proper build, even for a small software system.
Second, ten minutes is too much for a build that we run from the IDE after every one-line edit.
We need a finer-grained classification of builds: from bullet-fast to thorough and dead slow.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Trainspotting (1996) by Danny Boyle" src="/images/2025/04/trainspotting.jpg" longdesc="#b6b862c3" /><figcaption id="b6b862c3">Trainspotting (1996) by Danny Boyle</figcaption></figure>

<p>How long should a build be?</p>

<p>As long as it needs to be, in order to run all necessary tests.
Wrong.
Imagine a build that takes an hour.
The speed of development will be close to zero.
Programmers will complain.
A lot.</p>

<p>How about a build that takes a few seconds?
The speed of coding will be high—but not for long.
The quality of code will be jeopardized, because a quick build means weak testing, full of mocks.</p>

<p>So, how long should a build be?
The right answer is: between a few seconds and a few hours.
But the builds must be different.</p>

<h2 id="fast-build">Fast Build</h2>

<p>The first build is the one we run on our laptops.
It is <strong>fast</strong>.
It only includes unit tests.
Every one of them takes a few milliseconds.
Even if we have many, all together they can take less than a few seconds.
We also check test coverage thresholds.</p>

<p>If a local build takes longer than a few seconds, it starts being an obligation instead of a help.
We don’t run such a build because we enjoy the confidence it provides.
Instead, we run it because it’s “the right thing to do.”
Such a build is no fun, and is only an annoying routine.
A long build breaks the rhythm of energetic coding.</p>

<p>What about compilation?
The ten seconds include the time to compile the sources.
What if the project has hundreds of large C++ files that need a few minutes to compile?
We break such a project into smaller components—each with its own build and its own repository.
We don’t tolerate large codebases and <a href="/2018/09/05/monolithic-repositories.html">monolith</a> repositories.</p>

<h2 id="cheap-build">Cheap Build</h2>

<p>Finally, after running the fast build a few dozen times, we have enough confidence to submit a pull request.
Once submitted, GitHub picks it up and starts our workflows.</p>

<p>We have many of them, in different YAML files.
On top of unit tests, they run integration tests and all sorts of style checks.
We understand that the likelihood of failure is high,
because unit tests—those we ran in the fast build—are only a fraction of all tests.</p>

<p>We wait for a few minutes and see some workflows fail.
We investigate the failure, asking unit tests a question: “Why didn’t you catch this?”
When the answer is found, we patch the tests or create additional ones.
Then, we push and, again, wait a few minutes.
We see a new failure and repeat the cycle, which normally occurs a few times per branch.
Eventually, we see all GitHub workflows green.</p>

<p>We pay for this exercise.
First, GitHub charges per minute.
Second, the project pays us while we sit idle waiting for the answer from GitHub Actions.
That’s why we want the build to take less than ten minutes—it must be <strong>cheap</strong>.</p>

<h2 id="preflight-build">Preflight Build</h2>

<p>When all GitHub workflows are green, we hit the button, asking <a href="/2014/07/24/rultor-automated-merging.html">Rultor</a>—or GitHub <a href="https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue">Merge Queue</a>—to merge it.
A <strong>preflight</strong> build starts and takes up to an hour, at an on-demand AWS EC2 instance.
It takes so long because, on top of unit and integration tests, it runs, for example, mutation testing.
Even in a small codebase, ten minutes may not be enough.</p>

<p>Preflight builds may also run load, stress, performance, in-browser, and security penetration tests.
We don’t expect them to break after a green cheap build.
They do, however—but not often.
If they break, we get back to the fast build, blaming the safety net for negligence.
We reproduce the failure with a new unit test and make another merge attempt, expecting preflight to pass this time.
Eventually, it does, and the code goes to the <code class="language-plaintext highlighter-rouge">master</code> branch.</p>

<h2 id="proper-build">Proper Build</h2>

<p>Once in a while, we release a new version of the product—be it a library or a microservice.
This is when quality is the priority, while the duration of the build is irrelevant.
We hit the button and wait, for as long as necessary.
Sometimes a few hours.</p>

<p>Unlike all previous builds, this build is <strong>proper</strong>.
On top of all the tests mentioned above, it runs, for example, in-cloud multi-browser tests, automated A/B tests, and all sorts of regression tests.
In the future, most definitely, we’ll run LLM-based tests to detect design inconsistencies and security flaws.</p>

<p>Why didn’t we run these tests during the preflight build?
In order to avoid merge queue overflow.
A productive programmer may submit up to five pull requests per day.
With ten active contributors on a team, we may get a few dozen merges per day.
Since a merge queue can’t be parallelized, even one hour for a preflight may be too long.
A proper build definitely won’t fit.</p>

<p>Also, the integration with the production environment is time-consuming.
We enroll database changes, apply data migrations, update AWS configs, and switch between “green” and “blue” environments.</p>

<hr />

<p>In smaller projects, cheap and preflight builds may be similar.
In tiny projects, all three builds—cheap, preflight, and proper—may be identical.
However, we always keep the fast build different from the others.
The “four builds” framework may be reduced to a “two builds” one, but never to “one build fits all.”</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="devops" /><summary type="html"><![CDATA[Instead of trying to shorten the time that our builds take, we order and chain them by complexity, thus gradually reducing the risk.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2025/04/trainspotting.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2025/04/trainspotting.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Advice for First-Time Open Source Contributors</title><link href="https://www.yegor256.com/2024/12/15/open-source-beginner-advice.html" rel="alternate" type="text/html" title="Advice for First-Time Open Source Contributors" /><published>2024-12-15T00:00:00+00:00</published><updated>2024-12-15T00:00:00+00:00</updated><id>https://www.yegor256.com/2024/12/15/open-source-beginner-advice</id><content type="html" xml:base="https://www.yegor256.com/2024/12/15/open-source-beginner-advice.html"><![CDATA[<p>My <a href="https://github.com/eclipse-ee4j/jersey/blob/b2c7ba6d388cb9722f39073d7e82aa818fec49d5/core-common/src/test/java/org/glassfish/jersey/uri/internal/PathTemplateTest.java#L26">first attempt</a> to contribute to an open source repository was a
miserable failure. I picked a Java repository I was already using
(<a href="https://en.wikipedia.org/wiki/Eclipse_Jersey">Glassfish Jersey</a>), created a unit test for an existing class, submitted a
patch (there were no pull requests at that time), and… it was merged. I got
excited and submitted another unit test in a new patch. No surprise, the
repository owners asked me to stop fooling around: apparently, they didn’t need
unit tests just for the sake of it. I quickly lost interest in making changes
to anyone else’s code bases and started working on my own stuff instead.</p>

<p>Don’t repeat my mistake! Becoming a contributor to an existing code base is a
much faster path into the open source world and is far more rewarding. Here are
some things to keep in mind to make your journey to success even
faster—especially if you are just a beginner making your first pull requests.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Белое солнце пустыни (1970) by Владимир Мотыль" src="/images/2024/12/white-sun.jpg" longdesc="#78e09fd4" /><figcaption id="78e09fd4">Белое солнце пустыни (1970) by Владимир Мотыль</figcaption></figure>

<p><strong>Study Existing Files</strong>. Repository owners are usually proud of their code, no
  matter how ugly it might look. Don’t try to impress them with your unique
  formatting or naming style; this will only annoy them. Instead, study a few
  files they wrote and try to emulate their style as closely as possible. It’s
  safer. Once you’ve merged a few dozen pull requests, you can become more
  creative. But not now.</p>

<p><strong>Don’t Ask, Submit Issues</strong>. You are not the first contributor, nor will you be
  the last. Many people before you asked countless questions but wrote zero
  lines of code. Repository owners, especially in large projects, are not
  enthusiastic about teaching you or explaining how their code works. <a href="/2024/04/01/ping-me-please.html">Don’t
  bother them</a>
  with questions in Telegram; this will only demonstrate a lack of
  discipline. Instead, formulate every question as a new issue, pointing out,
  for example: 1) lack of documentation, 2) inconsistent design, 3) high
  complexity, or anything else preventing you from quickly understanding the
  code and contributing. Such an issue is a valuable contribution in itself.</p>

<p><strong>Blame the Code Base</strong>. If <code class="language-plaintext highlighter-rouge">master</code> branch is broken (you can’t build
  it locally due to some errors), don’t get frustrated. It’s not your fault.
  Instead, submit an issue and ask the team to fix it. They will respect
  such a bug report, because you’re, in this case, their tester, working
  for free.</p>

<p><strong>Ping Them</strong>. When you submit a pull request, an issue, or a comment to
  existing pull requests and issues, make sure you mention the person
  whose attention you need. <a href="/2024/04/01/ping-me-please.html">Ping them</a>,
  without any hesitation. Otherwise,
  they simply will miss your message.</p>

<p><strong>Make Small Changes</strong>. There is nothing more frustrating for a maintainer than
  a large pull request from a stranger. The reasons are simple: first,
  strangers usually write bad code; second, they often become disappointed when
  told their code is bad. Thus, investing time in reviewing a large pull
  request from a new contributor is risky. At the same time, it’s sad to see
  potentially good code end up in the trash. Do everyone a favor and start
  small—less than 50 <a href="/2014/11/14/hits-of-code.html">hits-of-code</a>
  per pull request. This approach will lead to
  higher-quality reviews and faster merges.</p>

<p><strong>Pick Easiest Problems</strong>. Not sure what to contribute? Scan their backlog of
  tickets and find the easiest ones to fix. Don’t try to impress anyone with
  your first pull request by showing off how smart you are. Instead, impress
  them by quickly finding a low-hanging fruit, fixing it, and getting it
  merged. In large, high-quality projects, what really matters is your ability
  to get your code through the pipeline of checkers, linters, and reviewers.
  The simpler the problem you solve, the faster your solution will be
  accepted.</p>

<p><strong>Write Tests</strong>. As simple as it sounds: every change you make should be
  motivated by a failing unit test that proves the code was broken before. If
  you, as a newcomer, modify code written by the owners, you must have a very
  good reason. When they review your contribution, their first question will
  be: “Why did you do this?” The strongest argument is a failing unit test. You
  might even consider submitting a pull request with only a failing test first
  (disabled), getting it merged, and then submitting another pull request that
  fixes the test.</p>

<p><strong>Look Like a Human</strong>. Your pull request looks suspicious because you are a
  stranger. In the age of AI, some pull requests might be coming from bots, and
  this trend will only grow. You must prove you’re a
  <a href="/2020/07/29/open-source-etiquette.html">trustworthy</a> human being:
  set a decent avatar, put your real name in your profile, fill in all the
  required fields, and so forth.</p>

<p><strong>Explain Your Changes</strong>. When submitting a pull request, there is a text area
  for a description. If you leave it empty or write just a few words, it sounds
  like this: “<em>Hey guys, I wrote some code. Now it’s your job to figure out what
  it does, why it matters, and how it works. I’m off to bed because I’m sick of
  your codebase. Cheers!</em>” Needless to say, this won’t help your pull request
  get merged anytime soon.</p>

<p><strong>Aim for Quality</strong>. Studies <a href="https://ieeexplore.ieee.org/document/7202946/">show</a>
  that most rejections of open source pull
  requests happen due to formatting and stylistic mistakes, not incorrect
  functionality. Keep this in mind. Pay attention to how you format your code,
  how you document your changes, and how many comments you add to every new
  method or class. This is what reviewers will look at first. It will form
  their initial impression of you.</p>

<p><strong>Be Polite and Persistent</strong>. The people you submit code to <a href="https://dl.acm.org/doi/10.1145/3377816.3381732">may be rude</a>. Don’t
  take it personally. They deal with hundreds of newcomers who write
  poor-quality code and assume it’s beautiful. No matter how <a href="https://dl.acm.org/doi/10.1145/3510003.3510111">aggressive</a> or
  resentful they sound, remain polite and professional. Don’t walk away after
  the first <a href="https://dl.acm.org/doi/10.1145/3479497">negative</a> comment. Keep insisting that your pull request deserves a
  merge. Pay attention to what they say, not how they say it. In the end, you
  want to get your code through. You don’t want to become their friend; you
  want your code to be merged. Read about
  <a href="/2020/07/29/open-source-etiquette.html">open source etiquette</a> too.</p>

<hr />

<p>You may also want to watch my course <a href="https://github.com/yegor256/osbp">“Open Source Best Practices”</a>
recently taught to BSc students of <a href="https://innopolis.university/">Innopolis University</a>:
<a href="https://www.youtube.com/playlist?list=PLaIsQH4uc08zjutyoBOtoa6fnxzrCQK2Q">eight video lectures</a>. At the lectures,
most of the topics mentioned above are discussed in details.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oss" /><summary type="html"><![CDATA[Making first steps in open source is hard. Submitting pull requests to big and popular repositories is very hard. These recommendations may help you simplify this task.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2024/12/white-sun.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2024/12/white-sun.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Толкователи хаоса</title><link href="https://www.yegor256.com/2024/09/21/interpreters-of-chaos.html" rel="alternate" type="text/html" title="Толкователи хаоса" /><published>2024-09-21T00:00:00+00:00</published><updated>2024-09-21T00:00:00+00:00</updated><id>https://www.yegor256.com/2024/09/21/interpreters-of-chaos</id><content type="html" xml:base="https://www.yegor256.com/2024/09/21/interpreters-of-chaos.html"><![CDATA[<p>Можно бесконечно смотреть на <a href="https://neolurk.org/wiki/%D0%91%D0%B5%D1%81%D0%BA%D0%BE%D0%BD%D0%B5%D1%87%D0%BD%D0%BE_%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE_%D1%81%D0%BC%D0%BE%D1%82%D1%80%D0%B5%D1%82%D1%8C_%D0%BD%D0%B0_%D1%82%D1%80%D0%B8_%D0%B2%D0%B5%D1%89%D0%B8">три вещи</a>: как горит огонь, как течёт вода и как
политические новости сменяют друг друга в любимых Telegram-каналах. Последнее
увлекает особенно сильно. Потому что, в отличие от божественной непостижимости
узоров пламени, в информационном хаосе разобраться, конечно же, можно. Я,
например, регулярно получаю анонимные письма от самых активных из тех, у кого
это прекрасно получается. В своих письмах они подробно и убедительно
анализируют геополитическую повестку, находят виноватых (обычно это евреи) и, в
целях безопасности, требуют уничтожить письмо сразу после прочтения. Менее
буйные писем не пишут, но, если их спросить, без тени сомнения расскажут, что
происходит и кто виноват.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="ChatGPT 4o" src="/images/2024/09/chaos-of-news.jpg" longdesc="#41c41cdb" /><figcaption id="41c41cdb">ChatGPT 4o</figcaption></figure>

<p>Эта очевидная и удручающая <a href="https://neolurk.org/wiki/%D0%A8%D0%B8%D0%B7%D0%BE%D1%84%D1%80%D0%B5%D0%BD%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F_%D0%BD%D0%B0%D1%81%D0%B5%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F">шизофренизация населения</a>
имеет очевидные причины. Их, как минимум, три.</p>

<p>Во-первых, пролетарий умственного труда (главный потребитель политических
новостей) уже давно не страдает от недостатка еды и сна. Его неплохо кормят,
ему выдают ипотеки и не заставляют работать по выходным. У него много
<a href="https://incrussia.ru/news/free-time-make-you-unhappy/">свободного времени</a>,
которое нечем занять.</p>

<p>Во-вторых, полное отсутствие цензуры на центральных площадках обмена
информацией. Ни YouTube, ни Telegram, ни VK не заблокируют видеоролик о новом
заговоре в правительстве или неизбежном крахе банковской системы. Однако ролик
заблокируют, <a href="https://habr.com/ru/news/464627/">например</a>, за насилие над животными. За насилие же над вашим
интеллектом блокировать не будут.</p>

<p>И наконец, третье и главное: отсутствие взвешенных дискуссий на официальных
государственных каналах. Неуклюжая
<a href="https://semnasem.org/posts/2019/08/06/solovevshina-lidiruet-no-ne-vladeet-umam-rossiyan">соловьёвщина</a>,
от которой тошнит уже даже самых ватных диванных экспертов, играет роль
цензора, телом своим пытаясь закрыть пытливый ум нашего толкователя от потока
вульгарных и интригующих подробностей. Безуспешно.</p>

<p>Таким образом, имеем неглупого и вполне образованного офисного планктонца.
<a href="https://en.wikipedia.org/wiki/Bullshit_Jobs">Унылая и несложная работа</a>
не напрягает его мозги. У него остаётся много свободного
времени, тратить которое на реализацию личных амбиций он не желает.
Он давно потерял надежду на социальный лифт (или не имел её вовсе). При всём при
этом он ежедневно пропускает через себя сотни фейков и десятки увлекательных
интерпретаций, в то время как от запуганных журналистов официальных СМИ он не
слышит ничего, кроме скучных штампов.</p>

<p>Что же делает наш герой? Он пытается сформировать в своей голове хоть какую-то
правдоподобную версию происходящего, наблюдая за хаотично и стремительно
меняющейся картинкой на экране. В то время как объём информации, доступный ему
для анализа, ничтожно мал по сравнению с тем, что необходимо для формирования
действительно правдоподобной и объективной картины, он всё же старается
сформулировать принципы, по которым функционирует мироздание. С подачи РенТВ
и <a href="https://www.youtube.com/@stori3.14">«Истории Пи»</a> он пытается сложить сложный пазл, увязывая, например, причины
междуусобных войн Древней Руси XIV века с речевыми оборотами предвыборных
дебатов <a href="https://ru.wikipedia.org/wiki/%D0%A5%D0%B0%D1%80%D1%80%D0%B8%D1%81,_%D0%9A%D0%B0%D0%BC%D0%B0%D0%BB%D0%B0">Камалы Харрис</a>. И у него получается!</p>

<p>Рано или поздно, одинокий и беспомощный под натиском инфомусора, он превращается
в преданного адепта одной из конспирологических версий происходящего.
Склеивая известные ему факты в мозаику, он добивается определённой логичности
взаимосвязей между ними. Чтобы мозаика не рассыпалась, он тратит весь свой
интеллектуальный и эмоциональный потенциал на поиск подтверждений своим
выводам.</p>

<p>Он фанатично защищает то, что построил с таким трудом, а именно свою личную
картину мира. В ней, как в сказке, есть добрые и злые волшебники, прекрасные
принцессы и хоббиты, свои правила и законы. Делом жизни становится защита этого
сказочного мира, а каждый инфовброс является потенциальной угрозой, ведь он
может разрушить сказку, внезапно превратив прекрасную принцессу, например, в
прокурора коррупционера. Поэтому либо объявляется фейком, если он противоречит мозаике,
либо превращается в репост. Наш герой как по минному полю движется по
инфопространству, не в состоянии оторваться ни на минуту.</p>

<p>Что в итоге? Расстройства психики разной степени тяжести. Результаты опроса
студентов в 2021-м году в США <a href="https://www.pewtrusts.org/en/trend/archive/fall-2023/americas-mental-health-crisis">показали</a>,
что 22% из них всерьез обдумывают самоубийство, в то время как десять лет назад
их было лишь 16%. В РФ ситуация
<a href="https://www.mediasphera.ru/issues/zhurnal-nevrologii-i-psikhiatrii-im-s-s-korsakova/2013/9/031997-7298201391">схожая</a>. И дальше, вероятно, будет только хуже.</p>

<p>А знаете ли вы, что то же время <a href="https://ru.wikipedia.org/wiki/%D0%A6%D0%B5%D0%BD%D0%B7%D1%83%D1%80%D0%B0_%D0%B2_%D0%9A%D0%B8%D1%82%D0%B0%D0%B5">в Китае</a> запрещён
<a href="https://rtvi.com/stories/oni-voobshhe-ne-paryatsya-kak-rabotaet-kitajskij-internet/">любой</a> политический контент на
видеостриминговых площадках? А может быть, это правильное решение, если мы
хотим спасти мозги наших граждан от шизофренизации?</p>

<p>А может быть, трудящемуся человеку из Самары и не нужно быть ежедневно в курсе того, что происходит в
Горловке или Тегеране? А может быть, для того чтобы прожить жизнь полезно и
продуктивно, ему достаточно 15-минутной новостной программы <a href="https://ru.wikipedia.org/wiki/%D0%92%D1%80%D0%B5%D0%BC%D1%8F_(%D1%82%D0%B5%D0%BB%D0%B5%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0)">«Время»</a> перед сном?
А может быть, по аналогии с запретом алкоголя для подростков, есть смысл
запретить политические новости для большинства жителей страны, потому как они
им только вредят, точно так же, как водка вредит детям?</p>

<p>Глядишь, «осведомленных» толкователей политического хаоса
станет поменьше, а здоровых людей будет больше.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="общество" /><summary type="html"><![CDATA[Пытаясь разобраться в происходящем, многие неизбежно сходят с ума, ибо невозможно постичь что либо, имея доступ лишь к малой части информации.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2024/09/chaos-of-news.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2024/09/chaos-of-news.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Files.fileExists or file.exists?</title><link href="https://www.yegor256.com/2024/07/07/checking-object-existence.html" rel="alternate" type="text/html" title="Files.fileExists or file.exists?" /><published>2024-07-07T00:00:00+00:00</published><updated>2024-07-07T00:00:00+00:00</updated><id>https://www.yegor256.com/2024/07/07/checking-object-existence</id><content type="html" xml:base="https://www.yegor256.com/2024/07/07/checking-object-existence.html"><![CDATA[<p>How would you design a class that abstracts, say, a file on a disk with certain
properties? Let’s say you need to be able to check whether the file exists on
the disk or has already been deleted. Would you create an object first and then
call the <code class="language-plaintext highlighter-rouge">exists()</code> method on it, or would you call <code class="language-plaintext highlighter-rouge">Disk.fileExists()</code> first
and only then, if <code class="language-plaintext highlighter-rouge">TRUE</code> is returned, make an instance of the <code class="language-plaintext highlighter-rouge">File</code> class and
continue working with it? This may sound like a matter of taste, but it’s not
that simple.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Capote (2005) by Bennett Miller" src="/images/2024/07/capote.jpg" longdesc="#f65f32af" /><figcaption id="f65f32af">Capote (2005) by Bennett Miller</figcaption></figure>

<p>Let’s see how we can check whether a file exists on the disk or not
in different programming languages and their SDKs:</p>

<table>
  <thead>
    <tr>
      <th>Language</th>
      <th>How to check if file exists?</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="https://docs.oracle.com/javase%2F7%2Fdocs%2Fapi%2F%2F/java/io/File.html#exists%28%29">JDK 7</a></td>
      <td><code class="language-plaintext highlighter-rouge">Files.get("a.txt").exists()</code></td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><a href="https://docs.oracle.com/javase/8/docs/api/java/nio/file/Files.html#exists-java.nio.file.Path-java.nio.file.LinkOption...-">JDK 8</a></td>
      <td><code class="language-plaintext highlighter-rouge">Files.exists(Path.get("a.txt"))</code></td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><a href="https://learn.microsoft.com/en-us/dotnet/api/system.io.file.exists?view=net-8.0">.Net</a></td>
      <td><code class="language-plaintext highlighter-rouge">File.Exists("a.txt")</code></td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><a href="https://nodejs.org/api/fs.html#fsexistssyncpath">Node</a></td>
      <td><code class="language-plaintext highlighter-rouge">fs.existsSync('a.txt')</code></td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><a href="https://docs.python.org/3/library/os.path.html#os.path.exists">Python</a></td>
      <td><code class="language-plaintext highlighter-rouge">os.path.exists("a.txt")</code></td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><a href="https://docs.python.org/3/library/pathlib.html#pathlib.Path">Python (3.4+)</a></td>
      <td><code class="language-plaintext highlighter-rouge">pathlib.Path("a.txt").exists()</code></td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><a href="https://ruby-doc.org/core-2.5.1/File.html#method-c-exist-3F">Ruby</a></td>
      <td><code class="language-plaintext highlighter-rouge">File.exist?("a.txt")</code></td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><a href="https://perldoc.perl.org/functions/-X">Perl</a></td>
      <td><code class="language-plaintext highlighter-rouge">if -e "a.txt"</code></td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td><a href="https://www.php.net/manual/en/function.file-exists.php">PHP</a></td>
      <td><code class="language-plaintext highlighter-rouge">file_exists('a.txt')</code></td>
    </tr>
  </tbody>
  <tbody>
    <tr>
      <td>Smalltalk</td>
      <td><code class="language-plaintext highlighter-rouge">(File name: 'a.txt') exists ifTrue: ...</code></td>
    </tr>
  </tbody>
</table>

<p>There are basically two different design decisions: either you make a <code class="language-plaintext highlighter-rouge">File</code>
object first, then ask it for its existence on the disk, or you ask the disk
whether the file is there and only after that you make an instance of the
<code class="language-plaintext highlighter-rouge">File</code> class. Which design is better? Let’s forget for a moment that static
methods are evil and imagine that <code class="language-plaintext highlighter-rouge">Files</code> is not a
<a href="/2014/05/05/oop-alternative-to-utility-classes.html">utility class</a>, but an
abstraction of a disk. How would you design the <code class="language-plaintext highlighter-rouge">exists()</code> method if you were
the designer of a new SDK for a new programming language?</p>

<p>To answer this question, we must answer a more fundamental one: what is the
message an SDK would be sending to a programmer by placing the <code class="language-plaintext highlighter-rouge">exists
()</code> method either on the <code class="language-plaintext highlighter-rouge">File</code> or on the <code class="language-plaintext highlighter-rouge">Disk</code>?</p>

<p>This may sound like a trivial and cosmetic issue to an experienced programmer,
but let me convince you that it’s not. Consider the design of a list of payment
bills in a database. A bill may either be “paid” or “not yet paid,” which a
programmer may check through the <code class="language-plaintext highlighter-rouge">paid()</code> method. The first design choice is
this (it’s Java):</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Bill</span> <span class="n">b</span> <span class="o">=</span> <span class="n">bills</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">42</span><span class="o">)</span>
<span class="k">if</span> <span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">paid</span><span class="o">())</span> <span class="o">{</span>
  <span class="c1">// do something</span>
<span class="o">}</span>
</code></pre></div></div>

<p>The second choice would be the following:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">bills</span><span class="o">.</span><span class="na">paid</span><span class="o">(</span><span class="mi">42</span><span class="o">))</span> <span class="o">{</span>
  <span class="c1">// do something</span>
<span class="o">}</span>
</code></pre></div></div>

<p>What is the message in the first snippet? I believe it’s the following: “A bill
may either be paid or not.” What is the message in the second design option?
It’s this: “If a bill exists, it is paid.” In other words, in the first
snippet, two qualities of a bill (“I exist” and “I’m paid”) co-exist, while in
the second snippet they are merged into one (“I’m paid”).</p>

<p>At the persistence layer, this dichotomy of qualities may mean either a nullable
column <code class="language-plaintext highlighter-rouge">paid</code> in an SQL-database table or one with the <code class="language-plaintext highlighter-rouge">NOT NULL</code> constraint.
The first snippet may return a <code class="language-plaintext highlighter-rouge">bill</code> object that exists in the database as a
row, but the <code class="language-plaintext highlighter-rouge">paid</code> column is set to <code class="language-plaintext highlighter-rouge">NULL</code>. A programmer who uses your design
can easily grasp the idea of the “being paid” status of a bill: it’s not the
same as the status of its existence. A programmer must first get the bill and
only then check its payment status. A programmer would also expect two points
of possible failure—a bill may be absent, or a bill may not be
paid—throwing different exceptions or returning different types of results.</p>

<p>As you see, this issue is not cosmetic but very much existential: the design of
the methods of a <code class="language-plaintext highlighter-rouge">Bill</code> or <code class="language-plaintext highlighter-rouge">Bills</code> helps programmers understand on what terms
the bills exist.</p>

<p>Now, the answer to the original question about the <code class="language-plaintext highlighter-rouge">exists()</code> method of a file
is easy to find. Locating a file on a disk is the first task, which checks
whether the name of the file is correct and the file may potentially exist on
the disk:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Here, an exception may be raised if,</span>
<span class="c1">// for example, the name of the file is</span>
<span class="c1">// wrong or simply a NULL.</span>
<span class="nc">File</span> <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">File</span><span class="o">(</span><span class="s">"a.txt"</span><span class="o">);</span>
</code></pre></div></div>

<p>Then, the existence of the file,
at this particular moment, on the disk, is checked:</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Here, an exception may be raised if,</span>
<span class="c1">// for example, the disk is not mount or</span>
<span class="c1">// the permissions are not sufficient for</span>
<span class="c1">// checking the existence of the file.</span>
<span class="kt">boolean</span> <span class="n">e</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">exists</span><span class="o">();</span>
</code></pre></div></div>

<p>We may now conclude that how Python, JS, Ruby, and many others let us check the
existence of a file on the disk is wrong. JDK 7 was right, but the inventors of
JDK 8 ruined it (most probably for the sake of performance).</p>

<p>By the way, there are many more
<a href="https://rosettacode.org/wiki/Check_that_file_exists">examples</a> of
different “file checking” design decisions in many other programming
languages.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="oop" /><summary type="html"><![CDATA[You either instantiate an object first and then check its qualities, or you check the quality and only then make an object; which way is better?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2024/07/capote.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2024/07/capote.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Win the Medals While Young</title><link href="https://www.yegor256.com/2024/06/23/medals-to-win.html" rel="alternate" type="text/html" title="Win the Medals While Young" /><published>2024-06-23T00:00:00+00:00</published><updated>2024-06-23T00:00:00+00:00</updated><id>https://www.yegor256.com/2024/06/23/medals-to-win</id><content type="html" xml:base="https://www.yegor256.com/2024/06/23/medals-to-win.html"><![CDATA[<p>One of the most frequently asked questions I hear from junior programmers
(no matter their age) is: What should I focus on now to build the best career I
can? There are multiple options, including creating a startup, getting a PhD,
contributing to open source, working for Google, and many others. In my
opinion, the most common mistake is trying to get rich fast. Obviously,
<em>money matters</em> and is the ultimate metric of career success, but trying to get it too
early is nothing more than gambling with your life at stake. Instead, I suggest
focusing on winning some “<em>medals</em>,” which can later be converted to cash, not
the other way around.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Неуловимые мстители (1966) by Эдмонд Кеосаян" src="/images/2024/06/elusive-avengers.jpg" longdesc="#0edd73ce" /><figcaption id="0edd73ce">Неуловимые мстители (1966) by Эдмонд Кеосаян</figcaption></figure>

<p>When your career is young (no matter your age), people with money, whether
employers or investors, are very hesitant to trust you with it. Even if your
skills are strong or your pitch looks promising, the list of achievements on
your CV is still pretty short or simply empty. In their eyes, you are a junior
and therefore, very unreliable.</p>

<p>You may get rich from this position of zero reliability, but it will mostly be a
matter of luck. Having no leverage, you will lose a very valuable resource—your
time. Initially, jumping from company to company, you might get a 25% raise
every year, but in a few years, the growth will slow down, and eventually, you
will become a middle-level programmer with almost no chances of getting truly
rich. You will be an old sergeant under the command of a much younger colonel.
You don’t want this to happen.</p>

<p>A much better alternative for a junior is being a hero while young. Earn some
medals: prove your exceptional value and become a member of the elite. Here is
a non-complete list of medals you can put on your CV as a software engineer
(the most respected at the top):</p>

<ul>
  <li><a href="https://awards.acm.org/">ACM</a> or <a href="https://corporate-awards.ieee.org/">IEEE</a> award winner</li>
  <li><a href="https://icpc.global/">ICPC</a> finalist or winner</li>
  <li><a href="https://2024.splashcon.org/">SPLASH</a> best paper award winner</li>
  <li>Creator of a 20K+ stars GitHub project (not “awesome-“)</li>
  <li>Author of a book published by <a href="https://www.oreilly.com/">O’Reilly</a></li>
  <li>PhD (preferably from MIT or Stanford)</li>
  <li><a href="https://javachampions.org/">Java Champion</a></li>
  <li>Author of 25+ merged pull requests into the Linux kernel</li>
  <li>3000+ rating on <a href="https://codeforces.com/">Codeforces</a></li>
  <li>Winner of $100K at <a href="https://www.kaggle.com/competitions">Kaggle</a></li>
  <li>Oracle/IBM/Microsoft certificate holder</li>
  <li>1K+ stars GitHub project</li>
  <li>50K+ StackOverflow <a href="/2017/02/14/stackoverflow-is-your-tool.html">reputation</a></li>
  <li>A-class conference org-team member</li>
  <li>Industry conference <a href="/2016/05/10/keynote-clowns.html">speaker</a></li>
  <li><a href="https://www.infoq.com/">InfoQ</a>, <a href="https://dzone.com/">DZone</a>, or <a href="https://habr.com/">Habr</a> <a href="/2018/11/20/journalism.html">author</a></li>
  <li>Local workshop organizer</li>
</ul>

<p>Some of these medals may take more than five years to earn. Of course, you must
make some money while working on them. The money may be, and will be, smaller
than what your friends are getting. Don’t pay attention to this. Eventually,
you will get even. Big time.</p>

<p>BTW, I borrowed the idea of “medals” from Alexander Panov, the founder of
<a href="https://neiry.ru/about-us">Neiry</a>, who I had a chance to
<a href="https://www.youtube.com/watch?v=wKWt9l9Ll4U">video-interview</a> recently
(watch the video, he
says what I’m saying in this blog post, but without as many details).</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="career" /><summary type="html"><![CDATA[Chasing money early in your career is like shooting yourself in the foot. Aim for exclusive achievements instead. This list may help you chose the right one.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2024/06/elusive-avengers.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2024/06/elusive-avengers.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Patents and Their Claims</title><link href="https://www.yegor256.com/2024/06/09/patent-claim.html" rel="alternate" type="text/html" title="Patents and Their Claims" /><published>2024-06-09T00:00:00+00:00</published><updated>2024-06-09T00:00:00+00:00</updated><id>https://www.yegor256.com/2024/06/09/patent-claim</id><content type="html" xml:base="https://www.yegor256.com/2024/06/09/patent-claim.html"><![CDATA[<p>If you, like me, are not a patent attorney and don’t understand patent law,
but your boss asks you to turn your recently written piece of code into
a patent, read on. The boss most probably won’t ask you to write the entire
patent. Instead, he will ask you to prepare a quick summary of the invention
(usually, a few slides) and then a hired lawyer will turn it into
a full-scale patent application. If you understand the purpose of patents,
the mechanics of patent offices, and the format of a patent claim, you will
do just fine.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="And Justice for All (1979) by Norman Jewison" src="/images/2024/06/and-justice-for-all.jpg" longdesc="#03ca432c" /><figcaption id="03ca432c">And Justice for All (1979) by Norman Jewison</figcaption></figure>

<p><strong>What are patents for?</strong>
Initially invented as a tool to encourage innocent inventors,
they are currently used mostly as a <a href="https://en.wikipedia.org/wiki/Patent_war">weapon</a>
either to bully larger organizations or
to defend them against bullying. It all started in Italy in 1474,
when a three-year “grant” <a href="https://guides.slv.vic.gov.au/patents/history">was given</a>
to Filippo Brunelleschi for “some machine or kind of ship,”
for a period of three years. Since then, <a href="https://www.wipo.int/en/ipfactsandfigures/patents">over 3.5 million patents</a>
have been issued by different <em>patent offices</em> around the globe to respected
inventors.</p>

<p><strong>What is a <a href="https://en.wikipedia.org/wiki/Patent_office">patent office</a>?</strong>
It’s a security organization funded by a government:
<a href="https://www.uspto.gov/">USPTO</a> in the United States,
<a href="https://www.epo.org/en">EPO</a> in the European Union,
<a href="https://english.cnipa.gov.cn/">CNIPA</a> in China,
<a href="https://rospatent.gov.ru/en">Rospatent</a> in Russia,
<a href="https://www.ipos.gov.sg/">IPOS</a> in Singapore,
and a <a href="https://en.wikipedia.org/wiki/Patent_office">few dozen</a> in other countries.
Also, there is
<a href="https://www.wipo.int/portal/en/index.html">WIPO</a> in Geneva (Switzerland) that
coordinates the work of all other POs, so far.
They protect you if you pay them (no surprise it all started in Italy!)</p>

<p>Let’s say you invent a new file compression algorithm and
you don’t want anyone to use it without your permission. First, you pay
<a href="https://www.uspto.gov/learning-and-resources/fees-and-payment/uspto-fee-schedule">$320</a>
to USPTO and submit an application. Then, in a few months, they assign your application
a number and call it “pending.” Then, you wait for about <a href="https://www.uspto.gov/dashboard/patents/pendency.html">3.5 years</a>
until they reply back with a decision: either you get a patent, you get nothing,
or they ask you to refine the application (most common case).
You make the changes, resubmit, they criticize, you resubmit, … and eventually
they issue a patent.</p>

<p><strong>Now what?</strong>
Your company publishes a press release, informs all investors, you
make a Facebook post so that your mom can be proud of you,
and in a few days everybody forgets about it. Because nobody cares. Until
the <em>litigation</em> day comes: your company finds out that another company is
also compressing files using the same algorithm. Or, the other way around:
they find out that the algorithm you invented is actually the algorithm they
have been quietly using for years. You both meet in a
<a href="https://en.wikipedia.org/wiki/Patent_court">patent court</a>.
The USPTO will be there too, since you paid them earlier.</p>

<p>If your opponent <em>does not</em> have a patent, the judge will ask them to prove
that their compression algorithm was publicly available prior to your
application. If they provide such proof, your patent will be
<a href="https://en.wikipedia.org/wiki/Patent_infringement"><em>infringed</em></a>—you will lose
it, your $320 won’t be refunded, and you will pay everything you made over the last
few years to the opponent.</p>

<p>If your opponent <em>does</em> have a patent, you will have to prove that your
patent is older and <em>broader</em>. USPTO attorneys most probably won’t try to help you,
since they won’t be on your side, but simply a mediator between both of you
(<a href="https://en.wikipedia.org/wiki/Apple_Inc._v._Samsung_Electronics_Co.">Apple vs. Samsung</a>
litigation is a good example of such a patent war). If you win,
their patent will be infringed and you will get all the profit they managed
to collect over the last years. Big win!</p>

<p><strong>What is patent breadth?</strong>
First, let’s discuss what is its <em>length</em>. You may be surprised,
but patents have pretty short lifetimes.
If you don’t extend a patent, it will expire in just <em>three years</em>. If you do want to
extend it, you must pay USPTO <a href="https://www.uspto.gov/patents/basics/manage">again</a>
and much more than you paid the first time:
<a href="https://www.uspto.gov/patents/basics/manage">$2,000</a> in 3 years,
$3,760 in 7 years,
$7,700 in 11 years.
Not cheap, huh?</p>

<p>Now, the breadth. Consider three <em>patent claims</em>:</p>

<ul>
  <li>“An apparatus consisting of a file reader; a file writer; and a compressor.”</li>
  <li>“A file compressing method comprising
a reader of JPEG files;
a probability distribution calculator;
a discrete transformer;
a bla-bla-bla optimizer;
an intermediate storage;
a writer of JPEG files.”</li>
  <li>“A Lempel–Ziv based data compression method comprising:
converting input stream into ψ-tokens;
reducing redundancy via Prishvin Ω(x) factorials;
serializing through Turgenev 𝛾-extremums.”</li>
</ul>

<p>The first claim is much broader: it probably covers all possible file compressing
software tools ever created. Such a broad patent claim won’t even be
<a href="https://en.wikipedia.org/wiki/Patentability">accepted</a>
by USPTO if you file it. They will do a quick search of <em>prior art</em> (other
patents previously issued) and reject you on the basis of a lack of
<a href="https://en.wikipedia.org/wiki/Novelty_%28patent%29"><em>novelty</em></a>.
The second claim is narrower, but still pretty broad, since the architecture
of other existing compressors may be very similar to the described one.
The third claim is the most narrow and the most specific (although, have
absolutely no sense, it is made up).</p>

<p><strong>How to write a good patent claim?</strong>
There is no such thing as an objectively <a href="https://support.lens.org/knowledge-base/what-are-claims/">good claim</a>,
since it depends on the
situation in the market. If the territory of innovation is not yet developed
and you are a pioneer, a broader and shorter (by the length in years, not the
number of words) patent is better. If you are making a small improvement
to a well-developed prior art, better make the patent narrower and longer.</p>

<p>A <em>patent claim</em> is the key element of a patent application. While the rest
of the document may be written by a patent attorney, I strongly suggest
you write the claim. At least its first version.
There is a more or less strict structure of a claim:
preamble, transitional phrase, and body:</p>

<table>
  <thead>
    <tr>
      <th>Preamble</th>
      <th>Transitional Phrase</th>
      <th>Body</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>An apparatus</td>
      <td>consisting of</td>
      <td>a file reader; a file writer; and a compressor.</td>
    </tr>
    <tr>
      <td>A file compressing method</td>
      <td>comprising</td>
      <td>a reader of JPEG files; a probability distribution calculator; a discrete transformer; a bla-bla-bla optimizer; an intermediate storage; a writer of JPEG files.</td>
    </tr>
    <tr>
      <td>A Lempel–Ziv based data compression method</td>
      <td>comprising</td>
      <td>converting input stream into ψ-tokens, reducing redundancy via Prishvin Ω(x) factorials, serializing through Turgenev 𝛾-extremums.</td>
    </tr>
  </tbody>
</table>

<p>The <a href="https://www.wilmerhale.com/insights/publications/patent-claim-preambles-july-16-2003">preamble</a>
must position your invention among all other devices
and methods in the prior art. The “an apparatus” preamble is very broad:
it could mean any device in the world, even not only
from the computing domain. The “a file compressing method” preamble
is much narrower, while “a Lempel–Ziv based data compression method” is the
most narrow one, with almost no ambiguity for the interpretation.</p>

<p>The body of a <a href="https://ocpatentlawyer.com/basics-writing-claim-patent-application/">patent claim</a>
must iterate the elements that constitute
the invention. The fewer elements you include in this list, the broader
the patent will be. The broader the patent, the easier to infringe. Well, unless
you invent something revolutionary new. On the other hand, the more elements,
the narrower the patent, the weaker it is as a weapon. It will be very hard
to use a narrow patent in a patent litigation.</p>

<p>The claim must also be <a href="https://en.wikipedia.org/wiki/Inventive_step_and_non-obviousness"><em>non-obvious</em></a>,
meaning that your invention has to be
an adequate distance beyond or above the state of the art. Say, a new file
format is invented for graphic images and you submit a patent application
for a ZIP compressor that can also compress files in this new format.
If there is no novelty in the compression algorithm itself, such a patent
would be considered obvious since it’s not far away from prior art: existing
ZIP compressors can deal with this file format, even though they don’t know
about it yet.</p>

<p><strong>How do you decide?</strong>
It is your responsibility as a patent author to decide how broad
and how long your patent must be. Then, a patent attorney will help you turn your
patent claim into a patent application (charging a
<a href="https://patentattorneyworldwide.com/us/much-patent-attorney-us-charges-stage-getting-patent/">few thousand dollars</a>
along the way), and then, hopefully, the litigation day will come and you will win
a lot of money. Most probably this will never happen and the patent will
remain a nice badge on your CV and your company’s website.</p>

<p>By the way, it is important to remember that if you want to get similar protection
in another country, you will have to pay their patent office separately.
Just like you pay every time a different mafia boss for protection when
you want to work in the territories they control.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="business" /><summary type="html"><![CDATA[If you are a programer, then even if a lawyer may help you write a patent application, your job is to prepare a proper patent claim, making its breadth right on.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2024/06/and-justice-for-all.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2024/06/and-justice-for-all.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Онлайн хулиганы</title><link href="https://www.yegor256.com/2024/05/27/freedom-of-speech-vs-intelligence.html" rel="alternate" type="text/html" title="Онлайн хулиганы" /><published>2024-05-27T00:00:00+00:00</published><updated>2024-05-27T00:00:00+00:00</updated><id>https://www.yegor256.com/2024/05/27/freedom-of-speech-vs-intelligence</id><content type="html" xml:base="https://www.yegor256.com/2024/05/27/freedom-of-speech-vs-intelligence.html"><![CDATA[<p>А знаете, какое самое популярное по числу просмотров видео на YouTube?
Вот <a href="https://www.youtube.com/watch?v=XqZsoesa55w">это</a>.
14 миллиардов просмотров за менее чем семь лет. И таких видео
<a href="https://en.wikipedia.org/wiki/List_of_most-liked_YouTube_videos">много</a>. Задаюсь
вопросом, о чем эта песня? Чему она учит? Какой вообще в ней смысл? С моей
точки зрения, сформированной когда-то давно сказками
<a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B8%D1%85%D0%B0%D0%BB%D0%BA%D0%BE%D0%B2,_%D0%A1%D0%B5%D1%80%D0%B3%D0%B5%D0%B9_%D0%92%D0%BB%D0%B0%D0%B4%D0%B8%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B8%D1%87">Сергея Михалкова</a>,
<a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%80%D1%88%D0%B0%D0%BA,_%D0%A1%D0%B0%D0%BC%D1%83%D0%B8%D0%BB_%D0%AF%D0%BA%D0%BE%D0%B2%D0%BB%D0%B5%D0%B2%D0%B8%D1%87">Самуила Маршака</a> и
<a href="https://ru.wikipedia.org/wiki/%D0%91%D0%B0%D1%80%D1%82%D0%BE,_%D0%90%D0%B3%D0%BD%D0%B8%D1%8F_%D0%9B%D1%8C%D0%B2%D0%BE%D0%B2%D0%BD%D0%B0">Агнии Барто</a>, в этой песне смысла нет.
Но ведь он должен быть, раз её посмотрели и оценили по достоинству сотни
миллионов родителей и детей! Нет, не должен. Всё просто: что сейчас нравится миллионам, то и
является эталоном качества. Но ведь так было не всегда.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Babyshark by Pinkfong" src="/images/2024/05/babyshark.jpg" longdesc="#4e17762b" /><figcaption id="4e17762b">Babyshark by Pinkfong</figcaption></figure>

<p>Ещё несколько десятков лет назад, ни интернета, ни YouTube не существовало, а
все средства массовой информации имели редакторов или даже редакционные
коллективы, которые решали, что публиковать и доносить до зрителя, а что сразу
в корзину. Более того, ещё раньше существовали страны, в которых на
государственном уровне свирепствовала <a href="https://ru.wikipedia.org/wiki/%D0%A6%D0%B5%D0%BD%D0%B7%D1%83%D1%80%D0%B0">цензура</a>, которая не только в
корзину отправляла негодный материал, но и автора в лагеря.</p>

<p>К счастью, скажете вы, те времена прошли. Наступило не просто время торжества
свободы слова, но и время почти абсолютной бесполезности редакторов и цензоров.
Несколько лет назад я испытал это на себе.
<a href="/2018/11/20/journalism.html">Дело было так</a>. Я написал техническую
<a href="/2018/03/06/speed-vs-quality.html">статью</a>
и отправил её в одно онлайн-издание. Мне отказали, объяснив почему. Я
отправил в другое издание, где мне тоже отказали, при этом назвав причину,
которая полностью противоречила первому отказу. Редакторы советовали исправить
статью в противоположных направлениях. В итоге я опубликовал статью у себя на
блоге, выступил с ней на <a href="https://youtu.be/55mwAbuDrV8">конференции</a>,
и получил куда больше просмотров
и лайков, чем, наверное, мог бы собрать в одном из этих уважаемых изданий.</p>

<p>Полагаю, что если бы подобные события происходили на 50 лет раньше,
я бы не смог опубликовать свои мысли, не удовлетворив строгих требований одного из редакторов. Меня бы
ограничила цензура. Более того, если бы я опубликовал свою статью
самостоятельно методом так называемого <a href="https://ru.wikipedia.org/wiki/%D0%A1%D0%B0%D0%BC%D0%B8%D0%B7%D0%B4%D0%B0%D1%82">самиздата</a>, то до лагерей было бы рукой
подать (как минимум строгого выговора мне было бы не избежать). Казалось бы,
какие ужасные времена остались в прошлом, и как прекрасно, что теперь нет ни
цензуры, ни редколлегий, а есть интернет! Это только на первый взгляд.</p>

<p>Как я её понимаю, задачей цензуры является не столько ограничение творческих
порывов авторов, сколько защита всех остальных граждан от последствий этих
порывов. Ровно как полиция наказывает хулиганов не потому, что хочет причинить
им вред, а для того, чтобы защитить окружающих. Видео ролики, подобные тому, с
просмотра которого мы начали эту статью, и есть, по моему мнению, самое настоящее
онлайн-хулиганство.</p>

<p>Вы скажете, но ведь люди-то довольны. Они же смотрят, ставят лайки,
подписываются на YouTube-каналы. Какое же это хулиганство, если большинство в
восторге и показывает этот контент своим детям, а те, надо полагать, водят
пальцем по экрану и мычат от удовольствия? В том-то и дело, что последствия
бытового хулиганства нам очевидны и неприятны: ни разбитые окна, ни запах в
лифте, ни надписи на стенах в подъезде абсолютному большинству не по душе.
Последствия же онлайн-хулиганства куда более трагические, но при этом менее
очевидные для большинства: у населения снижается интеллект и
пропадает тяга к прекрасному. Это страшнее запаха в подъезде.</p>

<p>Но виноваты в этом не авторы этой незатейливой песенки и прочего подобного
контента, которым заполнен YouTube! Они лишь делают свою работу, стараясь
соответствовать запросам общества. Но вот если 50 лет назад интересы общества
были представлены строгим редактором журнала <a href="https://ru.wikipedia.org/wiki/%D0%AE%D0%BD%D0%BE%D1%81%D1%82%D1%8C_(%D0%B6%D1%83%D1%80%D0%BD%D0%B0%D0%BB)">“Юность”</a> и художественным советом
фестиваля <a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%B5%D1%81%D0%BD%D1%8F_%D0%B3%D0%BE%D0%B4%D0%B0">“Песня года”</a>, то теперь интересы общества представляет YouTube,
который выражает их через количество лайков. Что бы автор ни создал, он
вынужден подстраиваться под вкусы толпы, которая безусловно с огромным
восторгом будет воспринимать нецензурную лексику, шутки ниже пояса, да и просто
во всех смыслах порнографию.</p>

<p>Поскольку средний человек не способен отличить онлайн-хулиганов от достойных авторов,
авторы вынуждены хулиганить, чтобы заслужить лайки (а значит, заработать
гонорар). Любимая нами свобода слова, которую уважаемая нами фирма Google
(владелец YouTube) защищает, позволяя размещать у себя контент практически
любого качества и содержания, и есть главный виновник и провокатор
онлайн-хулиганства.</p>

<p>Дописываю эту статью, находясь в Китае. Пару дней назад беседовал с одним
знакомым китайцем, и он рассказал, что на их онлайн-видео платформах существует
<a href="https://ru.wikipedia.org/wiki/%D0%A6%D0%B5%D0%BD%D0%B7%D1%83%D1%80%D0%B0_%D0%B2_%D0%9A%D0%B8%D1%82%D0%B0%D0%B5">строгая цензура</a>. Запрещено выкладывать всё, что по мнению правительства не
соответствует моральному облику строителя <del>коммунизма</del> здорового общества. И
конечно, запрещены любые видео ролики политического характера. Может быть,
такие ограничения имеют смысл, учитывая всё сказанное выше?</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="свобода" /><summary type="html"><![CDATA[Свобода слова помогает авторам быть услышанным, но при этом провоцирует и делает невозможным наказания онлайн хулиганов, в которых неизбежно превращаются авторы, стараясь заработать лайки.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2024/05/babyshark.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2024/05/babyshark.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Куликовы поля</title><link href="https://www.yegor256.com/2024/04/02/kulikovo-pole.html" rel="alternate" type="text/html" title="Куликовы поля" /><published>2024-04-02T00:00:00+00:00</published><updated>2024-04-02T00:00:00+00:00</updated><id>https://www.yegor256.com/2024/04/02/kulikovo-pole</id><content type="html" xml:base="https://www.yegor256.com/2024/04/02/kulikovo-pole.html"><![CDATA[<p>Я не историк и даже в школе историю не любил. Не любил, но верил,
что так все и было: и <a href="https://ru.wikipedia.org/wiki/%D0%92%D0%B5%D0%BB%D0%B8%D0%BA%D0%B0%D1%8F_%D1%84%D1%80%D0%B0%D0%BD%D1%86%D1%83%D0%B7%D1%81%D0%BA%D0%B0%D1%8F_%D1%80%D0%B5%D0%B2%D0%BE%D0%BB%D1%8E%D1%86%D0%B8%D1%8F">Французская революция</a>, и <a href="https://ru.wikipedia.org/wiki/%D0%92%D0%BE%D1%81%D1%81%D1%82%D0%B0%D0%BD%D0%B8%D0%B5_%D0%A1%D0%BF%D0%B0%D1%80%D1%82%D0%B0%D0%BA%D0%B0">восстание Спартака</a>,
и война <a href="атилла">Аттилы</a> с Римом, и охоты на мамонтов с последующими иллюстрациями
на стенах древних пещер. Все это было именно так, как рассказывали
нам учителя истории (они в моем детстве почему-то часто менялись).
Позже, когда появился Internet, я узнал о <a href="https://chronologia.org/">Новой Хронологии</a> и стал
скептиком — перестал верить на слово тому, что говорят историки. Стал в любом
описании событий прошлого искать альтернативные версии. Еще позже
я узнал, что это называется <a href="https://ru.wikipedia.org/wiki/%D0%A2%D0%B5%D0%BE%D1%80%D0%B8%D1%8F_%D0%B7%D0%B0%D0%B3%D0%BE%D0%B2%D0%BE%D1%80%D0%B0">конспирологией</a> и в порядочном обществе
осуждается, <a href="https://ru.wikipedia.org/wiki/Transhumanism_Inc.">Пелевин</a> не даст соврать.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Поединок Пересвета с Челубеем, Михаил Авилов" src="/images/2024/04/peresvet-i-chelubej.jpg" longdesc="#516b4ef8" /><figcaption id="516b4ef8">Поединок Пересвета с Челубеем, Михаил Авилов</figcaption></figure>

<p>Спрашивается, можем ли мы достоверно утверждать, что именно происходило, скажем,
шесть веков назад, когда ни Instagram ни даже <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%BD%D0%B8%D0%B3%D0%BE%D0%BF%D0%B5%D1%87%D0%B0%D1%82%D0%B0%D0%BD%D0%B8%D0%B5">книгопечатания</a> еще не существовало?
Достоверно не можем. Можем лишь предполагать, какие события могли произойти,
опираясь на имеющиеся в нашем распоряжении артефакты
и учитывая возможность их фальсификации. Чем артефактов меньше и чем они старше, тем
больше возможностей совершить ошибку. А ошибки совершаются, и часто.</p>

<p>Например, до недавнего времени считалось, что
<a href="https://ru.wikipedia.org/wiki/%D0%98%D0%B2%D0%B0%D0%BD_%D0%93%D1%80%D0%BE%D0%B7%D0%BD%D1%8B%D0%B9">Иван Грозный</a> убил своего сына, ударив тяжелым царским посохом по голове.
Откуда нам это было <a href="https://histrf.ru/read/articles/gibiel-nasliednika-mogh-li-ivan-groznyi-ubit-starshiegho-syna">известно</a>?
Через пять лет после якобы убийства,
<a href="https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D1%81%D1%81%D0%B5%D0%B2%D0%B8%D0%BD%D0%BE,_%D0%90%D0%BD%D1%82%D0%BE%D0%BD%D0%B8%D0%BE">Антонио Поссевино</a>, папский легат и секретарь ордена <a href="https://ru.wikipedia.org/wiki/%D0%98%D0%B5%D0%B7%D1%83%D0%B8%D1%82">иезуитов</a>,
опубликовал трактат <a href="http://moscowstate.ru/possevino-a-istoricheskie-sochineniya-o-rossii-xvi-v-moskoviya-livoniya-i-dr/">“Московия”</a>,
в котором и описал события, о которых якобы имел точные сведения.
Затем, через тридцать лет, когда у власти уже была <a href="https://ru.wikipedia.org/wiki/%D0%A0%D0%BE%D0%BC%D0%B0%D0%BD%D0%BE%D0%B2%D1%8B">династия Романовых</a>, эту версию
повторили, например, в <a href="http://lib.pushkinskijdom.ru/Default.aspx?tabid=10940">“Хронографе”</a> 1617 года.
Еще через двести лет, <a href="https://ru.wikipedia.org/wiki/%D0%9A%D0%B0%D1%80%D0%B0%D0%BC%D0%B7%D0%B8%D0%BD,_%D0%9D%D0%B8%D0%BA%D0%BE%D0%BB%D0%B0%D0%B9_%D0%9C%D0%B8%D1%85%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2%D0%B8%D1%87">Карамзин Николай Михайлович</a> в своей
<a href="https://ru.wikipedia.org/wiki/%D0%98%D1%81%D1%82%D0%BE%D1%80%D0%B8%D1%8F_%D0%B3%D0%BE%D1%81%D1%83%D0%B4%D0%B0%D1%80%D1%81%D1%82%D0%B2%D0%B0_%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D0%B9%D1%81%D0%BA%D0%BE%D0%B3%D0%BE">“Истории Государства Российского”</a>
пересказал версию легата, а еще через полвека
<a href="https://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%BF%D0%B8%D0%BD,_%D0%98%D0%BB%D1%8C%D1%8F_%D0%95%D1%84%D0%B8%D0%BC%D0%BE%D0%B2%D0%B8%D1%87">Иван Репин</a> написал свою <a href="https://ru.wikipedia.org/wiki/%D0%98%D0%B2%D0%B0%D0%BD_%D0%93%D1%80%D0%BE%D0%B7%D0%BD%D1%8B%D0%B9_%D0%B8_%D1%81%D1%8B%D0%BD_%D0%B5%D0%B3%D0%BE_%D0%98%D0%B2%D0%B0%D0%BD_16_%D0%BD%D0%BE%D1%8F%D0%B1%D1%80%D1%8F_1581_%D0%B3%D0%BE%D0%B4%D0%B0">известную картину</a>.
Однако, в 1963 году, гробница царя и его семьи
<a href="https://cyberleninka.ru/article/n/a-byl-li-ubit-syn-tsarya-ivana-iv-groznogo/viewer">была вскрыта</a>
и очевидных признаков убийства обнаружено не было: в волосах царевича не было крови.
Более того, были обнаружены признаки отравления, но не сына, а всей семьи.
Таким образом, версия об убийстве, в которую верил весь мир более четырех веков,
оказалсь лишь выдумкой итальянца закрепленной Карамзиным.</p>

<aside class="quote">
Если из истории убрать всю ложь, то совершенно не факт, что там останется одна только правда, может совсем ничего не остаться.
<span><a href="https://ru.wikiquote.org/wiki/%D0%A1%D1%82%D0%B0%D0%BD%D0%B8%D1%81%D0%BB%D0%B0%D0%B2_%D0%95%D0%B6%D0%B8_%D0%9B%D0%B5%D1%86">Станислав Ежи Лец</a></span>
</aside>

<p>Однако, не стоит поспешно обвинять Карамзина. Попытайтесь поставить себя на его место.
Ведь если взглянуть на ситуацию с его точки зрения: какой-то Иван Грозный, два
с половиной века назад, убил кого-то, или нет — разве это имеет принципиальное
значение? Задача была поставлена, заказчик ждал выполнения, а зарплата
была <a href="https://www.bbc.com/russian/features-38030502">внушительной</a>.
Так почему бы не написать, что убийство имело место, особенно если
есть “первоисточник”, на который можно опереться? Пусть потомки рассудят,
если им это будет важно: они могут провести эксгумацию, сопоставить
факты, написать диссертации. “По крайней мере, я никого не убивал”, — так,
вероятно, размышлял Николай Михайлович, задумываясь о том, соответствует ли
истине рассказ того итальянца, о правдивости которого он не имел
представления.</p>

<p>А если бы Карамзин пожелал докопаться до истины, не обращая внимания на возможную
потерю гонорара, какие бы методы и инструменты он мог использовать? Каковы
доступные историкам средства для выявления правды? Ещё более важный вопрос
касается точности каждого из этих инструментов: какова их погрешность? Можно
предположить, что арсенал методов у историков похож на тот, что используют
криминалисты: на основе косвенных и прямых доказательств необходимо воссоздать
образ событий, стараясь обеспечить согласованность улик. Также стоит принимать
в расчёт показания свидетелей, при этом учитывая степень их заинтересованности
в определённой интерпретации событий.</p>

<p>После завершения работы криминалистов следователь объединяет все собранные
улики, реконструирует картину произошедшего и направляет материалы в суд, где
обе стороны получают возможность высказаться. С одной стороны, адвокаты ищут
неточности в собранных данных, стараясь убедить суд в том, что предложенная
реконструкция событий неверна — например, что Иван Грозный не убивал своего
сына. С другой стороны, прокурор усиливает доводы в пользу правдоподобности
своей версии событий. В итоге суд формирует своё, субъективное мнение о
случившемся и выносит вердикт. Этот процесс является частью судебного права,
представляющего собой механизм установления истины в правовом государстве.
Наличие доступной всем гражданам судебной системы — несомненный признак
развитого общества. К этой мысли мы ещё вернёмся через минуту.</p>

<p>Пока же, от времен Ивана IV перейдем к ещё более древним эпохам и к событию,
предположительно, случившемуся двумя столетиями ранее:
грандиозному сражению 8-го сентября 1380-го года между народным ополчением
<a href="https://ru.wikipedia.org/wiki/%D0%94%D0%BC%D0%B8%D1%82%D1%80%D0%B8%D0%B9_%D0%98%D0%B2%D0%B0%D0%BD%D0%BE%D0%B2%D0%B8%D1%87_%D0%94%D0%BE%D0%BD%D1%81%D0%BA%D0%BE%D0%B9">Дмитрия Донского</a> и ордынским войском <a href="https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D0%BC%D0%B0%D0%B9">хана Мамая</a>,
с огромным количеством жертв, сыгравшему поворотную роль в русской истории,
и позднее названному <a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%83%D0%BB%D0%B8%D0%BA%D0%BE%D0%B2%D1%81%D0%BA%D0%B0%D1%8F_%D0%B1%D0%B8%D1%82%D0%B2%D0%B0">Куликовской битвой</a>.
Несмотря на то, что сам факт массового кровопролития не вызывает сомнений среди историков,
убедительно доказать, где именно это произошло, до сих пор
<a href="https://histrf.ru/read/articles/zagadki-kulikova-polya">проблематично</a>.</p>

<p>Действительно, как можно восстановить координаты поля,
на котором случилась кровавая сеча шесть веков тому назад? Где оно, <a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%83%D0%BB%D0%B8%D0%BA%D0%BE%D0%B2%D0%BE_%D0%BF%D0%BE%D0%BB%D0%B5">поле</a> это?
Наверное, можно снова попытаться опереться на воспоминания “итальянцев-очевидцев”,
но в то время не было ни атласов автомобильных дорог, ни Google Maps,
да и параллели с меридианами еще не придумали. Даже если у битвы были очевидцы
владеющие письмом, могли бы они описать координаты места так,
чтобы сегодня их можно было бы найти на Яндекс Картах?</p>

<p><img src="/images/2024/04/zadonshina.png" style="width:100%;" /></p>

<p>Умением письма кое-кто тогда как раз владел. Некто Софоний Рязанец.
Он написал книгу <a href="https://ru.wikipedia.org/wiki/%D0%97%D0%B0%D0%B4%D0%BE%D0%BD%D1%89%D0%B8%D0%BD%D0%B0">Задонщина</a>,
как <a href="http://lib2.pushkinskijdom.ru/Media/Default/PDF/TODRL/12_tom/Nazarevskii/Nazarevskii.pdf">считается</a>, еще при жизни Дмитрия, в которой
<a href="http://drevne-rus-lit.niv.ru/drevne-rus-lit/text/zadonschina/zadonschina-original.htm">рассказал</a>
о месте встречи православного князя с татарским темником
следующее: “<span class="ponomar">проли́тсѧ крóви наречьке напрѧде</span>” где-то
“<span class="ponomar">между дóном и́ непрóм</span>” (на фото <a href="https://lib-fond.ru/lib-rgb/310/f-310-632/#image-169">Ундольский список</a>, страница 185, выделение мое).
Считается, что Софоний — наиболее достоверный свидетель тех событий, а значит
нужно искать на карте упомяную речку, где-то рядом будет и поле.
Вот только карты Руси XIV века с названиями мелких рек у нас нет.</p>

<p>А если бы такая карта была, я бы искал речку “Напряду”, где-то между
<a href="https://ru.wikipedia.org/wiki/%D0%94%D0%BE%D0%BD">Доном</a> и <a href="https://ru.wikipedia.org/wiki/%D0%94%D0%BD%D0%B5%D0%BF%D1%80">Днепром</a>.
Однако, <a href="http://www.drevne.ru/lib/zadon_o.htm">в переводе</a>
почему-то эта фраза звучит так: “пролится крови на речьке Непрядве!”.
Как именно историки из “<span class="ponomar">напрѧда</span>” сделали “Непрядва”, мне сложно судить.
Очевидно, что такой перевод вносит некоторую погрешность в ход
дальнейшего расследования по нахождению места проведения битвы.
Однако, это лингвистическое допущение ничуть не смутило <a href="https://ru.wikipedia.org/wiki/%D0%9D%D0%B5%D1%87%D0%B0%D0%B5%D0%B2,_%D0%A1%D1%82%D0%B5%D0%BF%D0%B0%D0%BD_%D0%94%D0%BC%D0%B8%D1%82%D1%80%D0%B8%D0%B5%D0%B2%D0%B8%D1%87">Степана Нечаева</a>, который
в 1848 году обнаружил речку <a href="https://ru.wikipedia.org/wiki/%D0%9D%D0%B5%D0%BF%D1%80%D1%8F%D0%B4%D0%B2%D0%B0">Непрядву</a> на землях своего имения, предложил
называть одно из своих полей <a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%83%D0%BB%D0%B8%D0%BA%D0%BE%D0%B2%D0%BE_%D0%BF%D0%BE%D0%BB%D0%B5">Куликовым</a>, и стал собирать средства на <a href="https://kulpole.ru/places/memorial-na-krasnom-holme">памятник</a>.
Ему наверняка позавидовал, например, владелец речки <a href="https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%B2%D0%BB%D1%8F_(%D0%91%D1%80%D1%8F%D0%BD%D1%81%D0%BA%D0%B0%D1%8F_%D0%BE%D0%B1%D0%BB%D0%B0%D1%81%D1%82%D1%8C)">Навля</a> (Брянская область),
тоже подходящей названием под древнюю летопись, но инициатива уже была перехвачена.</p>

<p>Почти полтора века эта версия многих устраивала, до тех пор пока уже в наше время
математик <a href="https://ru.wikipedia.org/wiki/%D0%A4%D0%BE%D0%BC%D0%B5%D0%BD%D0%BA%D0%BE,_%D0%90%D0%BD%D0%B0%D1%82%D0%BE%D0%BB%D0%B8%D0%B9_%D0%A2%D0%B8%D0%BC%D0%BE%D1%84%D0%B5%D0%B5%D0%B2%D0%B8%D1%87">Анатолий Фоменко</a> с коллегами, в рамках работы над
<a href="https://chronologia.org/">Новой Хрологией</a>,
не <a href="https://chronologia.org/seven4_1/0601.html">предложили</a> перенести Куликово поле в центр нынешней Москвы, аргументируя это в основном
1) большей целесообразностью, с военной точки зрения, такого расположения в те времена,
2) почти полной <a href="https://www.ras.ru/digest/showdnews.aspx?id=44e0aa5d-b0d0-47fa-af88-a791b39f0598&amp;print=1">бесплодностью</a>
раскопков в имении Нечаева,
3) множественными захоронениями погибших воинов,
<a href="https://govoritmoskva.ru/news/120432/">обнаруженными</a> на территории Сретенки (район Москвы)
и
4) обнаружением практически всех географических названий (а их много!),
упоминаемых в источниках по Куликовской битве, на территории Москвы.
Например, по их мнению, речка в Москве, известная нам сегодня под именем
<a href="https://ru.wikipedia.org/wiki/%D0%9D%D0%B0%D0%BF%D1%80%D1%83%D0%B4%D0%BD%D0%B0%D1%8F">Напрудная</a>, и есть та самая речка “<span class="ponomar">Напрѧда</span>”.</p>

<p>Можно сказать, что и версия Нечаева и версия Фоменко или одинаково достоверны
или одинаково недостоверны: и в том и в другом случае
оригинальное название реки не соответствует ее современному названию.
Однако, на мой взгляд, противоречий в версии Нечаева больше, хотя бы
потому, что раскопки не дали никаких значимых результатов.
Однако, историческое научное сообщество решило не воспринимать команду Фоменко
всерьез и даже слова его версии на суде истории не давать.
Например, русскоязычные страницы Wikipedia, посвященные <a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%83%D0%BB%D0%B8%D0%BA%D0%BE%D0%B2%D1%81%D0%BA%D0%B0%D1%8F_%D0%B1%D0%B8%D1%82%D0%B2%D0%B0">Куликовой битве</a> и
<a href="https://ru.wikipedia.org/wiki/%D0%9A%D1%83%D0%BB%D0%B8%D0%BA%D0%BE%D0%B2%D0%BE_%D0%BF%D0%BE%D0%BB%D0%B5">Куликовому полю</a> не упоминают Новую Хронологию вообще.</p>

<p>Сейчас речь не о том, где на самом деле находится Куликово поле. Меня, да и вас,
уважаемые читатели, это напрямую никак не касается, и
установление истины жизнь нашу никак не изменит.
Однако, задумайтесь, в развитом ли обществе мы живем, если альтернативные версии исторических
событий не имеют права на голос в “суде”? И дело даже не в государстве, не в Wikipedia,
не в учебниках истории. Дело в нас с вами. Способны ли мы беспристрастно
анализировать работы историков, критиковать их, спорить с ними, опровергать
их версии, но при этом уважать их? Уважать их так, как справедливый судья в равной мере
уважает как прокурора, так и адвоката. Или в нашей голове есть место
только для одного “канонического” Куликова поля?</p>

<p>Позвольте закончить свою мысль одной поучительной историей.
Несколько месяцев назад мне повезло иметь возможность пообщаться с
<a href="https://www.youtube.com/watch?v=Ijy8_3efUuo">Анатолием Тимофеевичем Фоменко</a> и
<a href="https://www.youtube.com/watch?v=4-9MmyBP7gA">Глебом Владимировичем Носовским</a> на своем
YouTube канале, в формате интервью. Мы говорили в основном о <a href="https://chronologia.org/">Новой Хронологии</a>,
о их взгляде на историю и о сложностях, с которыми сталкиваются
авторы альтернативных взглядов на нее. Через некоторое время после публикации обоих видео роликов
я пригласил на интервью другого ученого, доктора технических наук, и получил
отказ. Привожу его полностью:</p>

<p><img src="/images/2024/04/refusal.png" style="width:100%; border: 1px solid gray;" /></p>

<p>Мне было стыдно читать это письмо. Стыдно за наших ученых.</p>

<p>У меня все.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="конспирология" /><summary type="html"><![CDATA[Великая битва на Куликовом поле произошла в 1380-м году, до сих пор точно не известно, где именно, это случилось, но альтернативные версии категорически отвергаются. Почему?]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2024/04/peresvet-i-chelubej.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2024/04/peresvet-i-chelubej.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Ping Me, Please!</title><link href="https://www.yegor256.com/2024/04/01/ping-me-please.html" rel="alternate" type="text/html" title="Ping Me, Please!" /><published>2024-04-01T00:00:00+00:00</published><updated>2024-04-01T00:00:00+00:00</updated><id>https://www.yegor256.com/2024/04/01/ping-me-please</id><content type="html" xml:base="https://www.yegor256.com/2024/04/01/ping-me-please.html"><![CDATA[<p>There is a big difference between distributed and collocated teams: the
communication in distributed teams is asynchronous, which essentially
means that when you ask something, a response doesn’t arrive
immediately. Moreover, it may never arrive. This can be very
uncomfortable for those who are used to the office work setup, where
most communications are synchronous: any question is answered
immediately, one way or another. In open-source repositories,
everything is asynchronous. Here is a simple rule that may help you
decrease the level of frustration in GitHub projects: ping them every
time you need an answer or attention to be paid to your code.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="10th &amp; Wolf (2006) by Bobby Moresco" src="/images/2024/04/10th-and-wolf.jpg" longdesc="#4569e6d3" /><figcaption id="4569e6d3">10th &amp; Wolf (2006) by Bobby Moresco</figcaption></figure>

<p>There are four basic scenarios:</p>

<ul>
  <li>
    <p>You submitted a <em>new issue</em>.
Post a message asking the project architect to pay attention.
Otherwise, the owner of the backlog may miss your issue, and it will not be resolved for a long time.</p>
  </li>
  <li>
    <p>You sent a <em>new pull request</em>.
Post a message right in the PR, asking the architect to review it.
Otherwise, the architect may simply miss the pull request, and it will stay in the “waiting for review” state for a long time.</p>
  </li>
  <li>
    <p>You made <em>changes</em> in a pull request after code reviewers asked you.
Post a message asking them to look at your code again.
Otherwise, they may never see the changes you just made.</p>
  </li>
  <li>
    <p>You post any <em>message</em> in an issue or a pull request.
<a href="/2020/07/29/open-source-etiquette.html">Start it</a> with the nickname of the person you are talking to.
Otherwise, the person who should help you may not receive a notification about your message, and it will be missed.</p>
  </li>
</ul>

<p>Also, listen to what Ben Batler from GitHub <a href="https://ben.balter.com/2014/11/06/rules-of-communicating-at-github/">said once</a>:
You essentially <em>never</em> “walk over” to a coworker’s desk, virtual or otherwise.
Whenever possible, prefer issues and chat over “just in time” communications.
Simply put, don’t text me in Telegram.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="mood" /><category term="oss" /><summary type="html"><![CDATA[Distributed teams communicate asynchronously, causing delays in responses; frequent pinging can alleviate frustration in open-source projects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2024/04/10th-and-wolf.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2024/04/10th-and-wolf.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Research Flow</title><link href="https://www.yegor256.com/2024/02/06/research-flow.html" rel="alternate" type="text/html" title="Research Flow" /><published>2024-02-06T00:00:00+00:00</published><updated>2024-02-06T00:00:00+00:00</updated><id>https://www.yegor256.com/2024/02/06/research-flow</id><content type="html" xml:base="https://www.yegor256.com/2024/02/06/research-flow.html"><![CDATA[<p>Say, you are a student, and I’m your <a href="/2021/12/01/teaching.html">teacher</a>.
Your task is to conduct
an experiment or a study and then write a research paper about it.
You can do it on your own and then present me with the results in the end.
Sometimes it may work, but most probably it won’t. I will have many comments,
suggestions, and plain simple disagreements with your research questions, results,
or conclusions. Just like in software engineering, the <a href="https://en.wikipedia.org/wiki/Waterfall_model">Waterfall</a> approach
is not an effective one. Instead, an <em>incremental and iterative</em> workflow
may yield way better results: you take a small step forward,
we discuss it, you rewrite, we agree, and you take the next step.
The ultimate objective is to write a paper that will be published in
a good journal or presented at a <a href="/2021/04/14/how-we-organized-iccq.html">decent conference</a>.
Well, yes, a passing grade is also an objective.</p>

<!--more-->

<figure class="jb_picture"><img itemprop="image" alt="Республика Шкид (1966) by Геннадий Полока" src="/images/2024/02/respublica-shkid.jpg" longdesc="#0f65f369" /><figcaption id="0f65f369">Республика Шкид (1966) by Геннадий Полока</figcaption></figure>

<p>Since the goal is a research paper, your first step is to create
a skeleton of it in LaTeX. If you don’t know LaTeX yet,
read <a href="https://www.amazon.com/LaTeX-Document-Preparation-System-2nd/dp/0201529831"><em>LaTeX: A Document Preparation System</em></a>
by <a href="https://en.wikipedia.org/wiki/Leslie_Lamport">Leslie Lamport</a> (just 242 pages).
If you think you already know LaTeX,
read <a href="https://yegor256.github.io/latex-best-practices/main.pdf">this short list of its best practices</a>
and <a href="https://link.springer.com/book/10.1007/978-1-4471-6639-9"><em>Writing for Computer Science</em></a>
by <a href="https://scholar.google.com/citations?user=uEHvqE8AAAAJ">Justin Zobel</a> (just 284 pages).</p>

<p>Now, create a document in <a href="https://overleaf.com">Overleaf</a>,
and <a href="https://www.overleaf.com/learn/how-to/Sharing_a_project#Link_sharing">share a link</a>
with me so that I can also edit the project. Use one of the following templates
(you should also <a href="https://www.overleaf.com/learn/how-to/Using_bibliographies_on_Overleaf">create</a>
an empty <code class="language-plaintext highlighter-rouge">main.bib</code> file too):
<a href="https://gist.github.com/yegor256/aa6215039cf687e4353c61385f23dd6c">ACM</a> (preferred),
<a href="https://gist.github.com/yegor256/58b289432d9ca13a6fd5946c77d8bd48">IEEE</a>,
and
<a href="https://gist.github.com/yegor256/905c0a1eac18eb6839a192b37f0816e4">Springer</a>.</p>

<p>Now, you are ready to begin your research incrementally,
and I will review each step in the following order:</p>

<ol>
  <li>Research Questions</li>
  <li>Research Method — <a href="/2023/10/11/method-of-research.html">how to?</a></li>
  <li>Preliminary Experiments</li>
  <li>Related Work — <a href="/2023/09/29/how-to-write-related-work-section.html">how to?</a></li>
  <li>Results — <a href="/2023/12/11/results-and-discussion.html">how to?</a></li>
  <li>Limitations</li>
  <li>Discussion — <a href="/2023/12/11/results-and-discussion.html">how to?</a></li>
  <li>Conclusion</li>
  <li>Introduction — <a href="/2022/08/24/research-paper-template.html">how to?</a></li>
  <li>Abstract</li>
  <li>Title</li>
</ol>

<p>Each step produces a few new paragraphs in the LaTeX document.
In <a href="/2022/08/24/research-paper-template.html">this blog post</a>,
you can find recommendations for each of the steps. I strongly advise against
moving on to the next step unless the previous one is discussed and approved.
Doing so may result in greater frustration on your part when you’ve
written almost the entire paper, and we both realize that the
whole piece must be rewritten, and experiments must be redone.</p>

<p>Before we start, please put a date on each of the steps mentioned above and send
me the entire work plan. It’s better to meet every milestone as a disciplined student;
otherwise, the risk of failure will be larger.</p>

<p>I believe that you, the reader of this blog post, are an honest and motivated
student who not only cares about achieving a passing grade but also
values contributing to computer science. However, not every student fits this description.
Surprisingly, some may lack motivation or diligence. To prioritize the enthusiastic
and dedicated students who require most of my attention, I may halt a research
project when I discern a lack of genuine commitment. The use of
<a href="/2023/12/26/defend-me-against-chatgpt.html">ChatGPT</a>,
plagiarism, and negligence may lead to an unfavorable assessment of your work.
I strongly advise avoiding them.</p>]]></content><author><name>Yegor Bugayenko</name><email>yegor256@gmail.com</email></author><category term="science" /><summary type="html"><![CDATA[This is a highly simplified description of a straightforward research workflow that I employ with my students in their research courses and diploma projects.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://www.yegor256.com/images/2024/02/respublica-shkid.jpg" /><media:content medium="image" url="https://www.yegor256.com/images/2024/02/respublica-shkid.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry></feed>